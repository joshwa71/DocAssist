

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * Windows FAQ
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# Windows FAQ¶

## Building from source¶

### Include optional components¶

There are two supported components for Windows PyTorch: MKL and MAGMA. Here
are the steps to build with them.

    
    
    REM Make sure you have 7z and curl installed.
    
    REM Download MKL files
    curl https://s3.amazonaws.com/ossci-windows/mkl_2020.2.254.7z -k -O
    7z x -aoa mkl_2020.2.254.7z -omkl
    
    REM Download MAGMA files
    REM version available:
    REM 2.5.4 (CUDA 10.1 10.2 11.0 11.1) x (Debug Release)
    REM 2.5.3 (CUDA 10.1 10.2 11.0) x (Debug Release)
    REM 2.5.2 (CUDA 9.2 10.0 10.1 10.2) x (Debug Release)
    REM 2.5.1 (CUDA 9.2 10.0 10.1 10.2) x (Debug Release)
    set CUDA_PREFIX=cuda102
    set CONFIG=release
    curl -k https://s3.amazonaws.com/ossci-windows/magma_2.5.4_%CUDA_PREFIX%_%CONFIG%.7z -o magma.7z
    7z x -aoa magma.7z -omagma
    
    REM Setting essential environment variables
    set "CMAKE_INCLUDE_PATH=%cd%\mkl\include"
    set "LIB=%cd%\mkl\lib;%LIB%"
    set "MAGMA_HOME=%cd%\magma"
    

### Speeding CUDA build for Windows¶

Visual Studio doesn’t support parallel custom task currently. As an
alternative, we can use `Ninja` to parallelize CUDA build tasks. It can be
used by typing only a few lines of code.

    
    
    REM Let's install ninja first.
    pip install ninja
    
    REM Set it as the cmake generator
    set CMAKE_GENERATOR=Ninja
    

### One key install script¶

You can take a look at this set of scripts. It will lead the way for you.

## Extension¶

### CFFI Extension¶

The support for CFFI Extension is very experimental. You must specify
additional `libraries` in `Extension` object to make it build on Windows.

    
    
    ffi = create_extension(
        '_ext.my_lib',
        headers=headers,
        sources=sources,
        define_macros=defines,
        relative_to=__file__,
        with_cuda=with_cuda,
        extra_compile_args=["-std=c99"],
        libraries=['ATen', '_C'] # Append cuda libraries when necessary, like cudart
    )
    

### Cpp Extension¶

This type of extension has better support compared with the previous one.
However, it still needs some manual configuration. First, you should open the
**x86_x64 Cross Tools Command Prompt for VS 2017**. And then, you can start
your compiling process.

## Installation¶

### Package not found in win-32 channel.¶

    
    
    Solving environment: failed
    
    PackagesNotFoundError: The following packages are not available from current channels:
    
    - pytorch
    
    Current channels:
    - https://conda.anaconda.org/pytorch/win-32
    - https://conda.anaconda.org/pytorch/noarch
    - https://repo.continuum.io/pkgs/main/win-32
    - https://repo.continuum.io/pkgs/main/noarch
    - https://repo.continuum.io/pkgs/free/win-32
    - https://repo.continuum.io/pkgs/free/noarch
    - https://repo.continuum.io/pkgs/r/win-32
    - https://repo.continuum.io/pkgs/r/noarch
    - https://repo.continuum.io/pkgs/pro/win-32
    - https://repo.continuum.io/pkgs/pro/noarch
    - https://repo.continuum.io/pkgs/msys2/win-32
    - https://repo.continuum.io/pkgs/msys2/noarch
    

PyTorch doesn’t work on 32-bit system. Please use Windows and Python 64-bit
version.

### Import error¶

    
    
    from torch._C import *
    
    ImportError: DLL load failed: The specified module could not be found.
    

The problem is caused by the missing of the essential files. Actually, we
include almost all the essential files that PyTorch need for the conda package
except VC2017 redistributable and some mkl libraries. You can resolve this by
typing the following command.

    
    
    conda install -c peterjc123 vc vs2017_runtime
    conda install mkl_fft intel_openmp numpy mkl
    

As for the wheels package, since we didn’t pack some libraries and VS2017
redistributable files in, please make sure you install them manually. The VS
2017 redistributable installer can be downloaded. And you should also pay
attention to your installation of Numpy. Make sure it uses MKL instead of
OpenBLAS. You may type in the following command.

    
    
    pip install numpy mkl intel-openmp mkl_fft
    

Another possible cause may be you are using GPU version without NVIDIA
graphics cards. Please replace your GPU package with the CPU one.

    
    
    from torch._C import *
    
    ImportError: DLL load failed: The operating system cannot run %1.
    

This is actually an upstream issue of Anaconda. When you initialize your
environment with conda-forge channel, this issue will emerge. You may fix the
intel-openmp libraries through this command.

    
    
    conda install -c defaults intel-openmp -f
    

## Usage (multiprocessing)¶

### Multiprocessing error without if-clause protection¶

    
    
    RuntimeError:
           An attempt has been made to start a new process before the
           current process has finished its bootstrapping phase.
    
       This probably means that you are not using fork to start your
       child processes and you have forgotten to use the proper idiom
       in the main module:
    
           if __name__ == '__main__':
               freeze_support()
               ...
    
       The "freeze_support()" line can be omitted if the program
       is not going to be frozen to produce an executable.
    

The implementation of `multiprocessing` is different on Windows, which uses
`spawn` instead of `fork`. So we have to wrap the code with an if-clause to
protect the code from executing multiple times. Refactor your code into the
following structure.

    
    
    import torch
    
    def main()
        for i, data in enumerate(dataloader):
            # do something here
    
    if __name__ == '__main__':
        main()
    

### Multiprocessing error “Broken pipe”¶

    
    
    ForkingPickler(file, protocol).dump(obj)
    
    BrokenPipeError: [Errno 32] Broken pipe
    

This issue happens when the child process ends before the parent process
finishes sending data. There may be something wrong with your code. You can
debug your code by reducing the `num_worker` of `DataLoader` to zero and see
if the issue persists.

### Multiprocessing error “driver shut down”¶

    
    
    Couldn’t open shared file mapping: <torch_14808_1591070686>, error code: <1455> at torch\lib\TH\THAllocator.c:154
    
    [windows] driver shut down
    

Please update your graphics driver. If this persists, this may be that your
graphics card is too old or the calculation is too heavy for your card. Please
update the TDR settings according to this post.

### CUDA IPC operations¶

    
    
    THCudaCheck FAIL file=torch\csrc\generic\StorageSharing.cpp line=252 error=63 : OS call failed or operation not supported on this OS
    

They are not supported on Windows. Something like doing multiprocessing on
CUDA tensors cannot succeed, there are two alternatives for this.

1\. Don’t use `multiprocessing`. Set the `num_worker` of `DataLoader` to zero.

2\. Share CPU tensors instead. Make sure your custom `DataSet` returns CPU
tensors.

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * Windows FAQ
    * Building from source
      * Include optional components
      * Speeding CUDA build for Windows
      * One key install script
    * Extension
      * CFFI Extension
      * Cpp Extension
    * Installation
      * Package not found in win-32 channel.
      * Import error
    * Usage (multiprocessing)
      * Multiprocessing error without if-clause protection
      * Multiprocessing error “Broken pipe”
      * Multiprocessing error “driver shut down”
      * CUDA IPC operations

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

