

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * Features for large-scale deployments
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# Features for large-scale deployments¶

  * Fleet-wide operator profiling

  * API usage logging

  * Attaching metadata to saved TorchScript models

  * Build environment considerations

  * Common extension points

This note talks about several extension points and tricks that might be useful
when running PyTorch within a larger system or operating multiple systems
using PyTorch in a larger organization.

It doesn’t cover topics of deploying models to production. Check `torch.jit`
or one of the corresponding tutorials.

The note assumes that you either build PyTorch from source in your
organization or have an ability to statically link additional code to be
loaded when PyTorch is used. Therefore, many of the hooks are exposed as C++
APIs that can be triggered once in a centralized place, e.g. in static
initialization code.

## Fleet-wide operator profiling¶

PyTorch comes with `torch.autograd.profiler` capable of measuring time taken
by individual operators on demand. One can use the same mechanism to do
“always ON” measurements for any process running PyTorch. It might be useful
for gathering information about PyTorch workloads running in a given process
or across the entire set of machines.

New callbacks for any operator invocation can be added with
`torch::addGlobalCallback`. Hooks will be called with `torch::RecordFunction`
struct that describes invocation context (e.g. name). If enabled,
`RecordFunction::inputs()` contains arguments of the function represented as
`torch::IValue` variant type. Note, that inputs logging is relatively
expensive and thus has to be enabled explicitly.

The operator callbacks also have access to `c10::ThreadLocalDebugInfo::get()`
interface that returns a pointer to the struct holding the debug information.
This debug information can be set earlier by using `at::DebugInfoGuard`
object. Debug information is propagated through the forward (including async
`fork` tasks) and backward passes and can be useful for passing some extra
information about execution environment (e.g. model id) from the higher layers
of the application down to the operator callbacks.

Invoking callbacks adds some overhead, so usually it’s useful to just randomly
sample operator invocations. This can be enabled on per-callback basis with an
optional sampling rate passed into `torch::addGlobalCallback`.

Note, that `addGlobalCallback` is not thread-safe and can be called only when
no PyTorch operator is running. Usually, it’s a good idea to call them once
during initialization.

Here’s an example:

    
    
    // Called somewhere in the program beginning
    void init() {
        // Sample one in a hundred operator runs randomly
        addGlobalCallback(
          RecordFunctionCallback(
            &onFunctionEnter,
            &onFunctionExit)
          .needsInputs(true)
          .samplingProb(0.01)
        );
        // Note, to enable observers in the model calling thread,
        // call enableRecordFunction() in the thread before running a model
    }
    
    void onFunctionEnter(const RecordFunction& fn) {
        std::cerr << "Before function " << fn.name()
                  << " with " << fn.inputs().size() << " inputs" << std::endl;
    }
    
    void onFunctionExit(const RecordFunction& fn) {
        std::cerr << "After function " << fn.name();
    }
    

## API usage logging¶

When running in a broader ecosystem, for example in managed job scheduler,
it’s often useful to track which binaries invoke particular PyTorch APIs.
There exists simple instrumentation injected at several important API points
that triggers a given callback. Because usually PyTorch is invoked in one-off
python scripts, the callback fires only once for a given process for each of
the APIs.

`c10::SetAPIUsageHandler` can be used to register API usage instrumentation
handler. Passed argument is going to be an “api key” identifying used point,
for example `python.import` for PyTorch extension import or
`torch.script.compile` if TorchScript compilation was triggered.

    
    
    SetAPIUsageLogger([](const std::string& event_name) {
        std::cerr << "API was used: " << event_name << std::endl;
    });
    

Note for developers: new API trigger points can be added in code with
`C10_LOG_API_USAGE_ONCE("my_api")` in C++ or
`torch._C._log_api_usage_once("my.api")` in Python.

## Attaching metadata to saved TorchScript models¶

TorchScript modules can be saved as an archive file that bundles serialized
parameters and module code as TorchScript (see `torch.jit.save()`). It’s often
convenient to bundle additional information together with the model, for
example, description of model producer or auxiliary artifacts.

It can be achieved by passing the `_extra_files` argument to
`torch.jit.save()` and `torch::jit::load` to store and retrieve arbitrary
binary blobs during saving process. Since TorchScript files are regular ZIP
archives, extra information gets stored as regular files inside archive’s
`extra/` directory.

There’s also a global hook allowing to attach extra files to any TorchScript
archive produced in the current process. It might be useful to tag models with
producer metadata, akin to JPEG metadata produced by digital cameras. Example
usage might look like:

    
    
    SetExportModuleExtraFilesHook([](const Module&) {
        ExtraFilesMap files;
        files["producer_info.json"] = "{\"user\": \"" + getenv("USER") + "\"}";
        return files;
    });
    

## Build environment considerations¶

TorchScript’s compilation needs to have access to the original python files as
it uses python’s `inspect.getsource` call. In certain production environments
it might require explicitly deploying `.py` files along with precompiled
`.pyc`.

## Common extension points¶

PyTorch APIs are generally loosely coupled and it’s easy to replace a
component with specialized version. Common extension points include:

  * Custom operators implemented in C++ - see tutorial for more details.

  * Custom data reading can be often integrated directly by invoking corresponding python library. Existing functionality of `torch.utils.data` can be utilized by extending `Dataset` or `IterableDataset`.

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * Features for large-scale deployments
    * Fleet-wide operator profiling
    * API usage logging
    * Attaching metadata to saved TorchScript models
    * Build environment considerations
    * Common extension points

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

