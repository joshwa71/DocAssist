

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.linalg >
  * torch.linalg.eigh
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.linalg.eigh¶

torch.linalg.eigh( _A_ , _UPLO ='L'_, _*_ , _out =None_)¶

    

Computes the eigenvalue decomposition of a complex Hermitian or real symmetric
matrix.

Letting K\mathbb{K}K be R\mathbb{R}R or C\mathbb{C}C, the **eigenvalue
decomposition** of a complex Hermitian or real symmetric matrix A∈Kn×nA \in
\mathbb{K}^{n \times n}A∈Kn×n is defined as

A=Qdiag⁡(Λ)QHQ∈Kn×n,Λ∈RnA = Q \operatorname{diag}(\Lambda)
Q^{\text{H}}\mathrlap{\qquad Q \in \mathbb{K}^{n \times n}, \Lambda \in
\mathbb{R}^n}A=Qdiag(Λ)QHQ∈Kn×n,Λ∈Rn

where QHQ^{\text{H}}QH is the conjugate transpose when QQQ is complex, and the
transpose when QQQ is real-valued. QQQ is orthogonal in the real case and
unitary in the complex case.

Supports input of float, double, cfloat and cdouble dtypes. Also supports
batches of matrices, and if `A` is a batch of matrices then the output has the
same batch dimensions.

`A` is assumed to be Hermitian (resp. symmetric), but this is not checked
internally, instead:

  * If `UPLO`= ‘L’ (default), only the lower triangular part of the matrix is used in the computation.

  * If `UPLO`= ‘U’, only the upper triangular part of the matrix is used.

The eigenvalues are returned in ascending order.

Note

When inputs are on a CUDA device, this function synchronizes that device with
the CPU.

Note

The eigenvalues of real symmetric or complex Hermitian matrices are always
real.

Warning

The eigenvectors of a symmetric matrix are not unique, nor are they continuous
with respect to `A`. Due to this lack of uniqueness, different hardware and
software may compute different eigenvectors.

This non-uniqueness is caused by the fact that multiplying an eigenvector by
-1 in the real case or by eiϕ,ϕ∈Re^{i \phi}, \phi \in \mathbb{R}eiϕ,ϕ∈R in the
complex case produces another set of valid eigenvectors of the matrix. For
this reason, the loss function shall not depend on the phase of the
eigenvectors, as this quantity is not well-defined. This is checked for
complex inputs when computing the gradients of this function. As such, when
inputs are complex and are on a CUDA device, the computation of the gradients
of this function synchronizes that device with the CPU.

Warning

Gradients computed using the eigenvectors tensor will only be finite when `A`
has distinct eigenvalues. Furthermore, if the distance between any two
eigenvalues is close to zero, the gradient will be numerically unstable, as it
depends on the eigenvalues λi\lambda_iλi​ through the computation of
1min⁡i≠jλi−λj\frac{1}{\min_{i \neq j} \lambda_i - \lambda_j}mini=j​λi​−λj​1​.

Warning

User may see pytorch crashes if running eigh on CUDA devices with CUDA
versions before 12.1 update 1 with large ill-conditioned matrices as inputs.
Refer to Linear Algebra Numerical Stability for more details. If this is the
case, user may (1) tune their matrix inputs to be less ill-conditioned, or (2)
use `torch.backends.cuda.preferred_linalg_library()` to try other supported
backends.

See also

`torch.linalg.eigvalsh()` computes only the eigenvalues of a Hermitian matrix.
Unlike `torch.linalg.eigh()`, the gradients of `eigvalsh()` are always
numerically stable.

`torch.linalg.cholesky()` for a different decomposition of a Hermitian matrix.
The Cholesky decomposition gives less information about the matrix but is much
faster to compute than the eigenvalue decomposition.

`torch.linalg.eig()` for a (slower) function that computes the eigenvalue
decomposition of a not necessarily Hermitian square matrix.

`torch.linalg.svd()` for a (slower) function that computes the more general
SVD decomposition of matrices of any shape.

`torch.linalg.qr()` for another (much faster) decomposition that works on
general matrices.

Parameters

    

  * **A** ( _Tensor_) – tensor of shape (*, n, n) where * is zero or more batch dimensions consisting of symmetric or Hermitian matrices.

  * **UPLO** ( _'L'_ _,_ _'U'_ _,_ _optional_ ) – controls whether to use the upper or lower triangular part of `A` in the computations. Default: ‘L’.

Keyword Arguments

    

**out** ( _tuple_ _,_ _optional_ ) – output tuple of two tensors. Ignored if
None. Default: None.

Returns

    

A named tuple (eigenvalues, eigenvectors) which corresponds to Λ\LambdaΛ and
QQQ above.

eigenvalues will always be real-valued, even when `A` is complex. It will also
be ordered in ascending order.

eigenvectors will have the same dtype as `A` and will contain the eigenvectors
as its columns.

Examples::

    
    
    
    >>> A = torch.randn(2, 2, dtype=torch.complex128)
    >>> A = A + A.T.conj()  # creates a Hermitian matrix
    >>> A
    tensor([[2.9228+0.0000j, 0.2029-0.0862j],
            [0.2029+0.0862j, 0.3464+0.0000j]], dtype=torch.complex128)
    >>> L, Q = torch.linalg.eigh(A)
    >>> L
    tensor([0.3277, 2.9415], dtype=torch.float64)
    >>> Q
    tensor([[-0.0846+-0.0000j, -0.9964+0.0000j],
            [ 0.9170+0.3898j, -0.0779-0.0331j]], dtype=torch.complex128)
    >>> torch.dist(Q @ torch.diag(L.cdouble()) @ Q.T.conj(), A)
    tensor(6.1062e-16, dtype=torch.float64)
    
    
    
    >>> A = torch.randn(3, 2, 2, dtype=torch.float64)
    >>> A = A + A.mT  # creates a batch of symmetric matrices
    >>> L, Q = torch.linalg.eigh(A)
    >>> torch.dist(Q @ torch.diag_embed(L) @ Q.mH, A)
    tensor(1.5423e-15, dtype=torch.float64)
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.linalg.eigh
    * `eigh()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

