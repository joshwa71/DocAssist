

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.linalg >
  * torch.linalg.lstsq
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.linalg.lstsq¶

torch.linalg.lstsq( _A_ , _B_ , _rcond =None_, _*_ , _driver =None_)¶

    

Computes a solution to the least squares problem of a system of linear
equations.

Letting K\mathbb{K}K be R\mathbb{R}R or C\mathbb{C}C, the **least squares
problem** for a linear system AX=BAX = BAX=B with A∈Km×n,B∈Km×kA \in
\mathbb{K}^{m \times n}, B \in \mathbb{K}^{m \times k}A∈Km×n,B∈Km×k is defined
as

min⁡X∈Kn×k∥AX−B∥F\min_{X \in \mathbb{K}^{n \times k}} \|AX -
B\|_FX∈Kn×kmin​∥AX−B∥F​

where ∥−∥F\|-\|_F∥−∥F​ denotes the Frobenius norm.

Supports inputs of float, double, cfloat and cdouble dtypes. Also supports
batches of matrices, and if the inputs are batches of matrices then the output
has the same batch dimensions.

`driver` chooses the backend function that will be used. For CPU inputs the
valid values are ‘gels’, ‘gelsy’, ‘gelsd, ‘gelss’. To choose the best driver
on CPU consider:

  * If `A` is well-conditioned (its condition number is not too large), or you do not mind some precision loss.

    * For a general matrix: ‘gelsy’ (QR with pivoting) (default)

    * If `A` is full-rank: ‘gels’ (QR)

  * If `A` is not well-conditioned.

    * ‘gelsd’ (tridiagonal reduction and SVD)

    * But if you run into memory issues: ‘gelss’ (full SVD).

For CUDA input, the only valid driver is ‘gels’, which assumes that `A` is
full-rank.

See also the full description of these drivers

`rcond` is used to determine the effective rank of the matrices in `A` when
`driver` is one of (‘gelsy’, ‘gelsd’, ‘gelss’). In this case, if σi\sigma_iσi​
are the singular values of A in decreasing order, σi\sigma_iσi​ will be
rounded down to zero if σi≤rcond⋅σ1\sigma_i \leq \text{rcond} \cdot
\sigma_1σi​≤rcond⋅σ1​. If `rcond`= None (default), `rcond` is set to the
machine precision of the dtype of `A` times max(m, n).

This function returns the solution to the problem and some extra information
in a named tuple of four tensors (solution, residuals, rank, singular_values).
For inputs `A`, `B` of shape (*, m, n), (*, m, k) respectively, it contains

  * solution: the least squares solution. It has shape (*, n, k).

  * residuals: the squared residuals of the solutions, that is, ∥AX−B∥F2\|AX - B\|_F^2∥AX−B∥F2​. It has shape equal to the batch dimensions of `A`. It is computed when m > n and every matrix in `A` is full-rank, otherwise, it is an empty tensor. If `A` is a batch of matrices and any matrix in the batch is not full rank, then an empty tensor is returned. This behavior may change in a future PyTorch release.

  * rank: tensor of ranks of the matrices in `A`. It has shape equal to the batch dimensions of `A`. It is computed when `driver` is one of (‘gelsy’, ‘gelsd’, ‘gelss’), otherwise it is an empty tensor.

  * singular_values: tensor of singular values of the matrices in `A`. It has shape (*, min(m, n)). It is computed when `driver` is one of (‘gelsd’, ‘gelss’), otherwise it is an empty tensor.

Note

This function computes X = `A`.pinverse() @ `B` in a faster and more
numerically stable way than performing the computations separately.

Warning

The default value of `rcond` may change in a future PyTorch release. It is
therefore recommended to use a fixed value to avoid potential breaking
changes.

Parameters

    

  * **A** ( _Tensor_) – lhs tensor of shape (*, m, n) where * is zero or more batch dimensions.

  * **B** ( _Tensor_) – rhs tensor of shape (*, m, k) where * is zero or more batch dimensions.

  * **rcond** ( _float_ _,_ _optional_ ) – used to determine the effective rank of `A`. If `rcond`= None, `rcond` is set to the machine precision of the dtype of `A` times max(m, n). Default: None.

Keyword Arguments

    

**driver** ( _str_ _,_ _optional_ ) – name of the LAPACK/MAGMA method to be
used. If None, ‘gelsy’ is used for CPU inputs and ‘gels’ for CUDA inputs.
Default: None.

Returns

    

A named tuple (solution, residuals, rank, singular_values).

Examples:

    
    
    >>> A = torch.randn(1,3,3)
    >>> A
    tensor([[[-1.0838,  0.0225,  0.2275],
         [ 0.2438,  0.3844,  0.5499],
         [ 0.1175, -0.9102,  2.0870]]])
    >>> B = torch.randn(2,3,3)
    >>> B
    tensor([[[-0.6772,  0.7758,  0.5109],
         [-1.4382,  1.3769,  1.1818],
         [-0.3450,  0.0806,  0.3967]],
        [[-1.3994, -0.1521, -0.1473],
         [ 1.9194,  1.0458,  0.6705],
         [-1.1802, -0.9796,  1.4086]]])
    >>> X = torch.linalg.lstsq(A, B).solution # A is broadcasted to shape (2, 3, 3)
    >>> torch.dist(X, torch.linalg.pinv(A) @ B)
    tensor(1.5152e-06)
    
    >>> S = torch.linalg.lstsq(A, B, driver='gelsd').singular_values
    >>> torch.dist(S, torch.linalg.svdvals(A))
    tensor(2.3842e-07)
    
    >>> A[:, 0].zero_()  # Decrease the rank of A
    >>> rank = torch.linalg.lstsq(A, B).rank
    >>> rank
    tensor([2])
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.linalg.lstsq
    * `lstsq()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

