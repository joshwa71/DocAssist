

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.optim >
  * Adadelta
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# Adadelta¶

_class _torch.optim.Adadelta( _params_ , _lr =1.0_, _rho =0.9_, _eps =1e-06_,
_weight_decay =0_, _foreach =None_, _*_ , _maximize =False_, _differentiable
=False_)[source]¶

    

Implements Adadelta algorithm.

input:γ (lr), θ0 (params), f(θ) (objective), ρ (decay), λ (weight
decay)initialize:v0←0 (square avg), u0←0 (accumulate variables)for t=1 to …
dogt←∇θft(θt−1)if
λ≠0gt←gt+λθt−1vt←vt−1ρ+gt2(1−ρ)Δxt←ut−1+ϵvt+ϵgtut←ut−1ρ+Δxt2(1−ρ)θt←θt−1−γΔxtreturn
θt\begin{aligned} &\rule{110mm}{0.4pt} \\\ &\textbf{input} : \gamma \text{
(lr)}, \: \theta_0 \text{ (params)}, \: f(\theta) \text{ (objective)}, \: \rho
\text{ (decay)}, \: \lambda \text{ (weight decay)} \\\ &\textbf{initialize} :
v_0 \leftarrow 0 \: \text{ (square avg)}, \: u_0 \leftarrow 0 \: \text{
(accumulate variables)} \\\\[-1.ex] &\rule{110mm}{0.4pt} \\\ &\textbf{for} \:
t=1 \: \textbf{to} \: \ldots \: \textbf{do} \\\ &\hspace{5mm}g_t \leftarrow
\nabla_{\theta} f_t (\theta_{t-1}) \\\ &\hspace{5mm}if \: \lambda \neq 0 \\\
&\hspace{10mm} g_t \leftarrow g_t + \lambda \theta_{t-1} \\\ &\hspace{5mm} v_t
\leftarrow v_{t-1} \rho + g^2_t (1 - \rho) \\\ &\hspace{5mm}\Delta x_t
\leftarrow \frac{\sqrt{u_{t-1} + \epsilon }}{ \sqrt{v_t + \epsilon} }g_t
\hspace{21mm} \\\ &\hspace{5mm} u_t \leftarrow u_{t-1} \rho + \Delta x^2_t (1
- \rho) \\\ &\hspace{5mm}\theta_t \leftarrow \theta_{t-1} - \gamma \Delta x_t
\\\ &\rule{110mm}{0.4pt} \\\\[-1.ex] &\bf{return} \: \theta_t \\\\[-1.ex]
&\rule{110mm}{0.4pt} \\\\[-1.ex] \end{aligned} ​input:γ (lr),θ0​ (params),f(θ)
(objective),ρ (decay),λ (weight decay)initialize:v0​←0 (square avg),u0​←0
(accumulate
variables)fort=1to…dogt​←∇θ​ft​(θt−1​)ifλ=0gt​←gt​+λθt−1​vt​←vt−1​ρ+gt2​(1−ρ)Δxt​←vt​+ϵ​ut−1​+ϵ​​gt​ut​←ut−1​ρ+Δxt2​(1−ρ)θt​←θt−1​−γΔxt​returnθt​​

For further details regarding the algorithm we refer to ADADELTA: An Adaptive
Learning Rate Method.

Parameters

    

  * **params** ( _iterable_ ) – iterable of parameters to optimize or dicts defining parameter groups

  * **rho** ( _float_ _,_ _optional_ ) – coefficient used for computing a running average of squared gradients (default: 0.9)

  * **eps** ( _float_ _,_ _optional_ ) – term added to the denominator to improve numerical stability (default: 1e-6)

  * **lr** ( _float_ _,_ _optional_ ) – coefficient that scale delta before it is applied to the parameters (default: 1.0)

  * **weight_decay** ( _float_ _,_ _optional_ ) – weight decay (L2 penalty) (default: 0)

  * **foreach** ( _bool_ _,_ _optional_ ) – whether foreach implementation of optimizer is used. If unspecified by the user (so foreach is None), we will try to use foreach over the for-loop implementation on CUDA, since it is usually significantly more performant. Note that the foreach implementation uses ~ sizeof(params) more peak memory than the for-loop version due to the intermediates being a tensorlist vs just one tensor. If memory is prohibitive, batch fewer parameters through the optimizer at a time or switch this flag to False (default: None)

  * **maximize** ( _bool_ _,_ _optional_ ) – maximize the params based on the objective, instead of minimizing (default: False)

  * **differentiable** ( _bool_ _,_ _optional_ ) – whether autograd should occur through the optimizer step in training. Otherwise, the step() function runs in a torch.no_grad() context. Setting to True can impair performance, so leave it False if you don’t intend to run autograd through this instance (default: False)

add_param_group( _param_group_ )¶

    

Add a param group to the `Optimizer` s param_groups.

This can be useful when fine tuning a pre-trained network as frozen layers can
be made trainable and added to the `Optimizer` as training progresses.

Parameters

    

**param_group** ( _dict_) – Specifies what Tensors should be optimized along
with group specific optimization options.

load_state_dict( _state_dict_ )¶

    

Loads the optimizer state.

Parameters

    

**state_dict** ( _dict_) – optimizer state. Should be an object returned from
a call to `state_dict()`.

register_load_state_dict_post_hook( _hook_ , _prepend =False_)¶

    

Register a load_state_dict post-hook which will be called after
`load_state_dict()` is called. It should have the following signature:

    
    
    hook(optimizer) -> None
    

The `optimizer` argument is the optimizer instance being used.

The hook will be called with argument `self` after calling `load_state_dict`
on `self`. The registered hook can be used to perform post-processing after
`load_state_dict` has loaded the `state_dict`.

Parameters

    

  * **hook** ( _Callable_ ) – The user defined hook to be registered.

  * **prepend** ( _bool_) – If True, the provided post `hook` will be fired before all the already registered post-hooks on `load_state_dict`. Otherwise, the provided `hook` will be fired after all the already registered post-hooks. (default: False)

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemoveableHandle`

register_load_state_dict_pre_hook( _hook_ , _prepend =False_)¶

    

Register a load_state_dict pre-hook which will be called before
`load_state_dict()` is called. It should have the following signature:

    
    
    hook(optimizer, state_dict) -> state_dict or None
    

The `optimizer` argument is the optimizer instance being used and the
`state_dict` argument is a shallow copy of the `state_dict` the user passed in
to `load_state_dict`. The hook may modify the state_dict inplace or optionally
return a new one. If a state_dict is returned, it will be used to be loaded
into the optimizer.

The hook will be called with argument `self` and `state_dict` before calling
`load_state_dict` on `self`. The registered hook can be used to perform pre-
processing before the `load_state_dict` call is made.

Parameters

    

  * **hook** ( _Callable_ ) – The user defined hook to be registered.

  * **prepend** ( _bool_) – If True, the provided pre `hook` will be fired before all the already registered pre-hooks on `load_state_dict`. Otherwise, the provided `hook` will be fired after all the already registered pre-hooks. (default: False)

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemoveableHandle`

register_state_dict_post_hook( _hook_ , _prepend =False_)¶

    

Register a state dict post-hook which will be called after `state_dict()` is
called. It should have the following signature:

    
    
    hook(optimizer, state_dict) -> state_dict or None
    

The hook will be called with arguments `self` and `state_dict` after
generating a `state_dict` on `self`. The hook may modify the state_dict
inplace or optionally return a new one. The registered hook can be used to
perform post-processing on the `state_dict` before it is returned.

Parameters

    

  * **hook** ( _Callable_ ) – The user defined hook to be registered.

  * **prepend** ( _bool_) – If True, the provided post `hook` will be fired before all the already registered post-hooks on `state_dict`. Otherwise, the provided `hook` will be fired after all the already registered post-hooks. (default: False)

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemoveableHandle`

register_state_dict_pre_hook( _hook_ , _prepend =False_)¶

    

Register a state dict pre-hook which will be called before `state_dict()` is
called. It should have the following signature:

    
    
    hook(optimizer) -> None
    

The `optimizer` argument is the optimizer instance being used. The hook will
be called with argument `self` before calling `state_dict` on `self`. The
registered hook can be used to perform pre-processing before the `state_dict`
call is made.

Parameters

    

  * **hook** ( _Callable_ ) – The user defined hook to be registered.

  * **prepend** ( _bool_) – If True, the provided pre `hook` will be fired before all the already registered pre-hooks on `state_dict`. Otherwise, the provided `hook` will be fired after all the already registered pre-hooks. (default: False)

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemoveableHandle`

register_step_post_hook( _hook_ )¶

    

Register an optimizer step post hook which will be called after optimizer
step. It should have the following signature:

    
    
    hook(optimizer, args, kwargs) -> None
    

The `optimizer` argument is the optimizer instance being used.

Parameters

    

**hook** ( _Callable_ ) – The user defined hook to be registered.

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

register_step_pre_hook( _hook_ )¶

    

Register an optimizer step pre hook which will be called before optimizer
step. It should have the following signature:

    
    
    hook(optimizer, args, kwargs) -> None or modified args and kwargs
    

The `optimizer` argument is the optimizer instance being used. If args and
kwargs are modified by the pre-hook, then the transformed values are returned
as a tuple containing the new_args and new_kwargs.

Parameters

    

**hook** ( _Callable_ ) – The user defined hook to be registered.

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

state_dict()¶

    

Returns the state of the optimizer as a `dict`.

It contains two entries:

  * `state`: a Dict holding current optimization state. Its content
    

differs between optimizer classes, but some common characteristics hold. For
example, state is saved per parameter, and the parameter itself is NOT saved.
`state` is a Dictionary mapping parameter ids to a Dict with state
corresponding to each parameter.

  * `param_groups`: a List containing all parameter groups where each
    

parameter group is a Dict. Each parameter group contains metadata specific to
the optimizer, such as learning rate and weight decay, as well as a List of
parameter IDs of the parameters in the group.

NOTE: The parameter IDs may look like indices but they are just IDs
associating state with param_group. When loading from a state_dict, the
optimizer will zip the param_group `params` (int IDs) and the optimizer
`param_groups` (actual `nn.Parameter` s) in order to match state WITHOUT
additional verification.

A returned state dict might look something like:

    
    
    {
        'state': {
            0: {'momentum_buffer': tensor(...), ...},
            1: {'momentum_buffer': tensor(...), ...},
            2: {'momentum_buffer': tensor(...), ...},
            3: {'momentum_buffer': tensor(...), ...}
        },
        'param_groups': [
            {
                'lr': 0.01,
                'weight_decay': 0,
                ...
                'params': [0]
            },
            {
                'lr': 0.001,
                'weight_decay': 0.5,
                ...
                'params': [1, 2, 3]
            }
        ]
    }
    

Return type

    

_Dict_[str, _Any_]

step( _closure =None_)[source]¶

    

Performs a single optimization step.

Parameters

    

**closure** ( _Callable_ _,_ _optional_ ) – A closure that reevaluates the
model and returns the loss.

zero_grad( _set_to_none =True_)¶

    

Resets the gradients of all optimized `torch.Tensor` s.

Parameters

    

**set_to_none** ( _bool_) – instead of setting to zero, set the grads to None.
This will in general have lower memory footprint, and can modestly improve
performance. However, it changes certain behaviors. For example: 1\. When the
user tries to access a gradient and perform manual ops on it, a None attribute
or a Tensor full of 0s will behave differently. 2\. If the user requests
`zero_grad(set_to_none=True)` followed by a backward pass, `.grad`s are
guaranteed to be None for params that did not receive a gradient. 3\.
`torch.optim` optimizers have a different behavior if the gradient is 0 or
None (in one case it does the step with a gradient of 0 and in the other it
skips the step altogether).

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * Adadelta
    * `Adadelta`
      * `Adadelta.add_param_group()`
      * `Adadelta.load_state_dict()`
      * `Adadelta.register_load_state_dict_post_hook()`
      * `Adadelta.register_load_state_dict_pre_hook()`
      * `Adadelta.register_state_dict_post_hook()`
      * `Adadelta.register_state_dict_pre_hook()`
      * `Adadelta.register_step_post_hook()`
      * `Adadelta.register_step_pre_hook()`
      * `Adadelta.state_dict()`
      * `Adadelta.step()`
      * `Adadelta.zero_grad()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

