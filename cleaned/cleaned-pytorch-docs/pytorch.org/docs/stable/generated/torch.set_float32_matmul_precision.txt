

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch >
  * torch.set_float32_matmul_precision
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.set_float32_matmul_precision¶

torch.set_float32_matmul_precision( _precision_ )[source]¶

    

Sets the internal precision of float32 matrix multiplications.

Running float32 matrix multiplications in lower precision may significantly
increase performance, and in some programs the loss of precision has a
negligible impact.

Supports three settings:

>   * “highest”, float32 matrix multiplications use the float32 datatype (24
> mantissa bits) for internal computations.
>
>   * “high”, float32 matrix multiplications either use the TensorFloat32
> datatype (10 mantissa bits) or treat each float32 number as the sum of two
> bfloat16 numbers (approximately 16 mantissa bits), if the appropriate fast
> matrix multiplication algorithms are available. Otherwise float32 matrix
> multiplications are computed as if the precision is “highest”. See below for
> more information on the bfloat16 approach.
>
>   * “medium”, float32 matrix multiplications use the bfloat16 datatype (8
> mantissa bits) for internal computations, if a fast matrix multiplication
> algorithm using that datatype internally is available. Otherwise float32
> matrix multiplications are computed as if the precision is “high”.
>
>

When using “high” precision, float32 multiplications may use a bfloat16-based
algorithm that is more complicated than simply truncating to some smaller
number mantissa bits (e.g. 10 for TensorFloat32, 8 for bfloat16). Refer to
[Henry2019] for a complete description of this algorithm. To briefly explain
here, the first step is to realize that we can perfectly encode a single
float32 number as the sum of three bfloat16 numbers (because float32 has 24
mantissa bits while bfloat16 has 8, and both have the same number of exponent
bits). This means that the product of two float32 numbers can be exactly given
by the sum of nine products of bfloat16 numbers. We can then trade accuracy
for speed by dropping some of these products. The “high” precision algorithm
specifically keeps only the three most significant products, which
conveniently excludes all of the products involving the last 8 mantissa bits
of either input. This means that we can represent our inputs as the sum of two
bfloat16 numbers rather than three. Because bfloat16 fused-multiply-add (FMA)
instructions are typically >10x faster than float32 ones, it’s faster to do
three multiplications and 2 additions with bfloat16 precision than it is to do
a single multiplication with float32 precision.

Henry2019

    

http://arxiv.org/abs/1904.06376

Note

This does not change the output dtype of float32 matrix multiplications, it
controls how the internal computation of the matrix multiplication is
performed.

Note

This does not change the precision of convolution operations. Other flags,
like torch.backends.cudnn.allow_tf32, may control the precision of convolution
operations.

Note

This flag currently only affects one native device type: CUDA. If “high” or
“medium” are set then the TensorFloat32 datatype will be used when computing
float32 matrix multiplications, equivalent to setting
torch.backends.cuda.matmul.allow_tf32 = True. When “highest” (the default) is
set then the float32 datatype is used for internal computations, equivalent to
setting torch.backends.cuda.matmul.allow_tf32 = False.

Parameters

    

**precision** ( _str_) – can be set to “highest” (default), “high”, or
“medium” (see above).

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.set_float32_matmul_precision
    * `set_float32_matmul_precision()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

