

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * DataParallel
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# DataParallel¶

_class _torch.nn.DataParallel( _module_ , _device_ids =None_, _output_device
=None_, _dim =0_)[source]¶

    

Implements data parallelism at the module level.

This container parallelizes the application of the given `module` by splitting
the input across the specified devices by chunking in the batch dimension
(other objects will be copied once per device). In the forward pass, the
module is replicated on each device, and each replica handles a portion of the
input. During the backwards pass, gradients from each replica are summed into
the original module.

The batch size should be larger than the number of GPUs used.

Warning

It is recommended to use `DistributedDataParallel`, instead of this class, to
do multi-GPU training, even if there is only a single node. See: Use
nn.parallel.DistributedDataParallel instead of multiprocessing or
nn.DataParallel and Distributed Data Parallel.

Arbitrary positional and keyword inputs are allowed to be passed into
DataParallel but some types are specially handled. tensors will be
**scattered** on dim specified (default 0). tuple, list and dict types will be
shallow copied. The other types will be shared among different threads and can
be corrupted if written to in the model’s forward pass.

The parallelized `module` must have its parameters and buffers on
`device_ids[0]` before running this `DataParallel` module.

Warning

In each forward, `module` is **replicated** on each device, so any updates to
the running module in `forward` will be lost. For example, if `module` has a
counter attribute that is incremented in each `forward`, it will always stay
at the initial value because the update is done on the replicas which are
destroyed after `forward`. However, `DataParallel` guarantees that the replica
on `device[0]` will have its parameters and buffers sharing storage with the
base parallelized `module`. So **in-place** updates to the parameters or
buffers on `device[0]` will be recorded. E.g., `BatchNorm2d` and
`spectral_norm()` rely on this behavior to update the buffers.

Warning

Forward and backward hooks defined on `module` and its submodules will be
invoked `len(device_ids)` times, each with inputs located on a particular
device. Particularly, the hooks are only guaranteed to be executed in correct
order with respect to operations on corresponding devices. For example, it is
not guaranteed that hooks set via `register_forward_pre_hook()` be executed
before all `len(device_ids)` `forward()` calls, but that each such hook be
executed before the corresponding `forward()` call of that device.

Warning

When `module` returns a scalar (i.e., 0-dimensional tensor) in `forward()`,
this wrapper will return a vector of length equal to number of devices used in
data parallelism, containing the result from each device.

Note

There is a subtlety in using the `pack sequence -> recurrent network -> unpack
sequence` pattern in a `Module` wrapped in `DataParallel`. See My recurrent
network doesn’t work with data parallelism section in FAQ for details.

Parameters

    

  * **module** ( _Module_) – module to be parallelized

  * **device_ids** ( _list_ _of_ _int_ _or_ _torch.device_) – CUDA devices (default: all devices)

  * **output_device** ( _int_ _or_ _torch.device_) – device location of output (default: device_ids[0])

Variables

    

**module** ( _Module_) – the module to be parallelized

Example:

    
    
    >>> net = torch.nn.DataParallel(model, device_ids=[0, 1, 2])
    >>> output = net(input_var)  # input_var can be on any device, including CPU
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * DataParallel
    * `DataParallel`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

