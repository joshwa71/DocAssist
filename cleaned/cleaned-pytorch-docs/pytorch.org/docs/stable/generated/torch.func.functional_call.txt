

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.func >
  * torch.func API Reference >
  * torch.func.functional_call
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.func.functional_call¶

torch.func.functional_call( _module_ , _parameter_and_buffer_dicts_ , _args_ ,
_kwargs =None_, _*_ , _tie_weights =True_, _strict =False_)¶

    

Performs a functional call on the module by replacing the module parameters
and buffers with the provided ones.

Note

If the module has active parametrizations, passing a value in the
`parameter_and_buffer_dicts` argument with the name set to the regular
parameter name will completely disable the parametrization. If you want to
apply the parametrization function to the value passed please set the key as
`{submodule_name}.parametrizations.{parameter_name}.original`.

Note

If the module performs in-place operations on parameters/buffers, these will
be reflected in the `parameter_and_buffer_dicts` input.

> Example:
>  
>  
>     >>> a = {'foo': torch.zeros(())}
>     >>> mod = Foo()  # does self.foo = self.foo + 1
>     >>> print(mod.foo)  # tensor(0.)
>     >>> functional_call(mod, a, torch.ones(()))
>     >>> print(mod.foo)  # tensor(0.)
>     >>> print(a['foo'])  # tensor(1.)
>  

Note

If the module has tied weights, whether or not functional_call respects the
tying is determined by the tie_weights flag.

Example:

    
    
    >>> a = {'foo': torch.zeros(())}
    >>> mod = Foo()  # has both self.foo and self.foo_tied which are tied. Returns x + self.foo + self.foo_tied
    >>> print(mod.foo)  # tensor(1.)
    >>> mod(torch.zeros(()))  # tensor(2.)
    >>> functional_call(mod, a, torch.zeros(()))  # tensor(0.) since it will change self.foo_tied too
    >>> functional_call(mod, a, torch.zeros(()), tie_weights=False)  # tensor(1.)--self.foo_tied is not updated
    >>> new_a = {'foo', torch.zeros(()), 'foo_tied': torch.zeros(())}
    >>> functional_call(mod, new_a, torch.zeros()) # tensor(0.)
    

An example of passing mutliple dictionaries

    
    
    a = ({'weight': torch.ones(1, 1)}, {'buffer': torch.zeros(1)})  # two separate dictionaries
    mod = nn.Bar(1, 1)  # return self.weight @ x + self.buffer
    print(mod.weight)  # tensor(...)
    print(mod.buffer)  # tensor(...)
    x = torch.randn((1, 1))
    print(x)
    functional_call(mod, a, x)  # same as x
    print(mod.weight)  # same as before functional_call
    

And here is an example of applying the grad transform over the parameters of a
model.

    
    
    import torch
    import torch.nn as nn
    from torch.func import functional_call, grad
    
    x = torch.randn(4, 3)
    t = torch.randn(4, 3)
    model = nn.Linear(3, 3)
    
    def compute_loss(params, x, t):
        y = functional_call(model, params, x)
        return nn.functional.mse_loss(y, t)
    
    grad_weights = grad(compute_loss)(dict(model.named_parameters()), x, t)
    

Note

If the user does not need grad tracking outside of grad transforms, they can
detach all of the parameters for better performance and memory usage

Example:

    
    
    >>> detached_params = {k: v.detach() for k, v in model.named_parameters()}
    >>> grad_weights = grad(compute_loss)(detached_params, x, t)
    >>> grad_weights.grad_fn  # None--it's not tracking gradients outside of grad
    

This means that the user cannot call `grad_weight.backward()`. However, if
they don’t need autograd tracking outside of the transforms, this will result
in less memory usage and faster speeds.

Parameters

    

  * **module** ( _torch.nn.Module_) – the module to call

  * **parameters_and_buffer_dicts** ( _Dict_ _[_ _str_ _,_ _Tensor_ _] or_ _tuple_ _of_ _Dict_ _[_ _str_ _,_ _Tensor_ _]_ ) – the parameters that will be used in the module call. If given a tuple of dictionaries, they must have distinct keys so that all dictionaries can be used together

  * **args** ( _Any_ _or_ _tuple_) – arguments to be passed to the module call. If not a tuple, considered a single argument.

  * **kwargs** ( _dict_) – keyword arguments to be passed to the module call

  * **tie_weights** ( _bool_ _,_ _optional_ ) – If True, then parameters and buffers tied in the original model will be treated as tied in the reparamaterized version. Therefore, if True and different values are passed for the tied paramaters and buffers, it will error. If False, it will not respect the originally tied parameters and buffers unless the values passed for both weights are the same. Default: True.

  * **strict** ( _bool_ _,_ _optional_ ) – If True, then the parameters and buffers passed in must match the parameters and buffers in the original module. Therefore, if True and there are any missing or unexpected keys, it will error. Default: False.

Returns

    

the result of calling `module`.

Return type

    

Any

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.func.functional_call
    * `functional_call()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

