

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch >
  * torch.lobpcg
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.lobpcg¶

torch.lobpcg( _A_ , _k =None_, _B =None_, _X =None_, _n =None_, _iK =None_,
_niter =None_, _tol =None_, _largest =None_, _method =None_, _tracker =None_,
_ortho_iparams =None_, _ortho_fparams =None_, _ortho_bparams =None_)[source]¶

    

Find the k largest (or smallest) eigenvalues and the corresponding
eigenvectors of a symmetric positive definite generalized eigenvalue problem
using matrix-free LOBPCG methods.

This function is a front-end to the following LOBPCG algorithms selectable via
method argument:

> method=”basic” \- the LOBPCG method introduced by Andrew Knyazev, see
> [Knyazev2001]. A less robust method, may fail when Cholesky is applied to
> singular input.
>
> method=”ortho” \- the LOBPCG method with orthogonal basis selection
> [StathopoulosEtal2002]. A robust method.

Supported inputs are dense, sparse, and batches of dense matrices.

Note

In general, the basic method spends least time per iteration. However, the
robust methods converge much faster and are more stable. So, the usage of the
basic method is generally not recommended but there exist cases where the
usage of the basic method may be preferred.

Warning

The backward method does not support sparse and complex inputs. It works only
when B is not provided (i.e. B == None). We are actively working on
extensions, and the details of the algorithms are going to be published
promptly.

Warning

While it is assumed that A is symmetric, A.grad is not. To make sure that
A.grad is symmetric, so that A - t * A.grad is symmetric in first-order
optimization routines, prior to running lobpcg we do the following
symmetrization map: A -> (A + A.t()) / 2. The map is performed only when the A
requires gradients.

Parameters

    

  * **A** ( _Tensor_) – the input tensor of size (∗,m,m)(*, m, m)(∗,m,m)

  * **B** ( _Tensor_ _,_ _optional_ ) – the input tensor of size (∗,m,m)(*, m, m)(∗,m,m). When not specified, B is interpreted as identity matrix.

  * **X** ( _tensor_ _,_ _optional_ ) – the input tensor of size (∗,m,n)(*, m, n)(∗,m,n) where k <= n <= m. When specified, it is used as initial approximation of eigenvectors. X must be a dense tensor.

  * **iK** ( _tensor_ _,_ _optional_ ) – the input tensor of size (∗,m,m)(*, m, m)(∗,m,m). When specified, it will be used as preconditioner.

  * **k** ( _integer_ _,_ _optional_ ) – the number of requested eigenpairs. Default is the number of XXX columns (when specified) or 1.

  * **n** ( _integer_ _,_ _optional_ ) – if XXX is not specified then n specifies the size of the generated random approximation of eigenvectors. Default value for n is k. If XXX is specified, the value of n (when specified) must be the number of XXX columns.

  * **tol** ( _float_ _,_ _optional_ ) – residual tolerance for stopping criterion. Default is feps ** 0.5 where feps is smallest non-zero floating-point number of the given input tensor A data type.

  * **largest** ( _bool_ _,_ _optional_ ) – when True, solve the eigenproblem for the largest eigenvalues. Otherwise, solve the eigenproblem for smallest eigenvalues. Default is True.

  * **method** ( _str_ _,_ _optional_ ) – select LOBPCG method. See the description of the function above. Default is “ortho”.

  * **niter** ( _int_ _,_ _optional_ ) – maximum number of iterations. When reached, the iteration process is hard-stopped and the current approximation of eigenpairs is returned. For infinite iteration but until convergence criteria is met, use -1.

  * **tracker** ( _callable_ _,_ _optional_ ) – 

a function for tracing the iteration process. When specified, it is called at
each iteration step with LOBPCG instance as an argument. The LOBPCG instance
holds the full state of the iteration process in the following attributes:

> iparams, fparams, bparams \- dictionaries of integer, float, and boolean
> valued input parameters, respectively
>
> ivars, fvars, bvars, tvars \- dictionaries of integer, float, boolean, and
> Tensor valued iteration variables, respectively.
>
> A, B, iK \- input Tensor arguments.
>
> E, X, S, R \- iteration Tensor variables.

For instance:

> ivars[“istep”] \- the current iteration step X \- the current approximation
> of eigenvectors E \- the current approximation of eigenvalues R \- the
> current residual ivars[“converged_count”] \- the current number of converged
> eigenpairs tvars[“rerr”] \- the current state of convergence criteria

Note that when tracker stores Tensor objects from the LOBPCG instance, it must
make copies of these.

If tracker sets bvars[“force_stop”] = True, the iteration process will be
hard-stopped.

  * **ortho_iparams** ( _dict_ _,_ _optional_ ) – various parameters to LOBPCG algorithm when using method=”ortho”.

  * **ortho_fparams** ( _dict_ _,_ _optional_ ) – various parameters to LOBPCG algorithm when using method=”ortho”.

  * **ortho_bparams** ( _dict_ _,_ _optional_ ) – various parameters to LOBPCG algorithm when using method=”ortho”.

Returns

    

tensor of eigenvalues of size (∗,k)(*, k)(∗,k)

X (Tensor): tensor of eigenvectors of size (∗,m,k)(*, m, k)(∗,m,k)

Return type

    

E (Tensor)

References

[Knyazev2001] Andrew V. Knyazev. (2001) Toward the Optimal Preconditioned
Eigensolver: Locally Optimal Block Preconditioned Conjugate Gradient Method.
SIAM J. Sci. Comput., 23(2), 517-541. (25 pages)
https://epubs.siam.org/doi/abs/10.1137/S1064827500366124

[StathopoulosEtal2002] Andreas Stathopoulos and Kesheng Wu. (2002) A Block
Orthogonalization Procedure with Constant Synchronization Requirements. SIAM
J. Sci. Comput., 23(6), 2165-2182. (18 pages)
https://epubs.siam.org/doi/10.1137/S1064827500370883

[DuerschEtal2018] Jed A. Duersch, Meiyue Shao, Chao Yang, Ming Gu. (2018) A
Robust and Efficient Implementation of LOBPCG. SIAM J. Sci. Comput., 40(5),
C655-C676. (22 pages) https://epubs.siam.org/doi/abs/10.1137/17M1129830

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.lobpcg
    * `lobpcg()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

