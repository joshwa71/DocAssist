

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.linalg >
  * torch.linalg.qr
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.linalg.qr¶

torch.linalg.qr( _A_ , _mode ='reduced'_, _*_ , _out =None_)¶

    

Computes the QR decomposition of a matrix.

Letting K\mathbb{K}K be R\mathbb{R}R or C\mathbb{C}C, the **full QR
decomposition** of a matrix A∈Km×nA \in \mathbb{K}^{m \times n}A∈Km×n is
defined as

A=QRQ∈Km×m,R∈Km×nA = QR\mathrlap{\qquad Q \in \mathbb{K}^{m \times m}, R \in
\mathbb{K}^{m \times n}}A=QRQ∈Km×m,R∈Km×n

where QQQ is orthogonal in the real case and unitary in the complex case, and
RRR is upper triangular with real diagonal (even in the complex case).

When m > n (tall matrix), as R is upper triangular, its last m - n rows are
zero. In this case, we can drop the last m - n columns of Q to form the
**reduced QR decomposition** :

A=QRQ∈Km×n,R∈Kn×nA = QR\mathrlap{\qquad Q \in \mathbb{K}^{m \times n}, R \in
\mathbb{K}^{n \times n}}A=QRQ∈Km×n,R∈Kn×n

The reduced QR decomposition agrees with the full QR decomposition when n >= m
(wide matrix).

Supports input of float, double, cfloat and cdouble dtypes. Also supports
batches of matrices, and if `A` is a batch of matrices then the output has the
same batch dimensions.

The parameter `mode` chooses between the full and reduced QR decomposition. If
`A` has shape (*, m, n), denoting k = min(m, n)

  * `mode`= ‘reduced’ (default): Returns (Q, R) of shapes (*, m, k), (*, k, n) respectively. It is always differentiable.

  * `mode`= ‘complete’: Returns (Q, R) of shapes (*, m, m), (*, m, n) respectively. It is differentiable for m <= n.

  * `mode`= ‘r’: Computes only the reduced R. Returns (Q, R) with Q empty and R of shape (*, k, n). It is never differentiable.

Differences with numpy.linalg.qr:

  * `mode`= ‘raw’ is not implemented.

  * Unlike numpy.linalg.qr, this function always returns a tuple of two tensors. When `mode`= ‘r’, the Q tensor is an empty tensor.

Warning

The elements in the diagonal of R are not necessarily positive. As such, the
returned QR decomposition is only unique up to the sign of the diagonal of R.
Therefore, different platforms, like NumPy, or inputs on different devices,
may produce different valid decompositions.

Warning

The QR decomposition is only well-defined if the first k = min(m, n) columns
of every matrix in `A` are linearly independent. If this condition is not met,
no error will be thrown, but the QR produced may be incorrect and its autodiff
may fail or produce incorrect results.

Parameters

    

  * **A** ( _Tensor_) – tensor of shape (*, m, n) where * is zero or more batch dimensions.

  * **mode** ( _str_ _,_ _optional_ ) – one of ‘reduced’, ‘complete’, ‘r’. Controls the shape of the returned tensors. Default: ‘reduced’.

Keyword Arguments

    

**out** ( _tuple_ _,_ _optional_ ) – output tuple of two tensors. Ignored if
None. Default: None.

Returns

    

A named tuple (Q, R).

Examples:

    
    
    >>> A = torch.tensor([[12., -51, 4], [6, 167, -68], [-4, 24, -41]])
    >>> Q, R = torch.linalg.qr(A)
    >>> Q
    tensor([[-0.8571,  0.3943,  0.3314],
            [-0.4286, -0.9029, -0.0343],
            [ 0.2857, -0.1714,  0.9429]])
    >>> R
    tensor([[ -14.0000,  -21.0000,   14.0000],
            [   0.0000, -175.0000,   70.0000],
            [   0.0000,    0.0000,  -35.0000]])
    >>> (Q @ R).round()
    tensor([[  12.,  -51.,    4.],
            [   6.,  167.,  -68.],
            [  -4.,   24.,  -41.]])
    >>> (Q.T @ Q).round()
    tensor([[ 1.,  0.,  0.],
            [ 0.,  1., -0.],
            [ 0., -0.,  1.]])
    >>> Q2, R2 = torch.linalg.qr(A, mode='r')
    >>> Q2
    tensor([])
    >>> torch.equal(R, R2)
    True
    >>> A = torch.randn(3, 4, 5)
    >>> Q, R = torch.linalg.qr(A, mode='complete')
    >>> torch.dist(Q @ R, A)
    tensor(1.6099e-06)
    >>> torch.dist(Q.mT @ Q, torch.eye(4))
    tensor(6.2158e-07)
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.linalg.qr
    * `qr()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

