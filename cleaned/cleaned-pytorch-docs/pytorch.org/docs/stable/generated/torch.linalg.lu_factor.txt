

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.linalg >
  * torch.linalg.lu_factor
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.linalg.lu_factor¶

torch.linalg.lu_factor( _A_ , _*_ , _bool pivot=True_, _out=None) -> (Tensor_,
_Tensor_ )¶

    

Computes a compact representation of the LU factorization with partial
pivoting of a matrix.

This function computes a compact representation of the decomposition given by
`torch.linalg.lu()`. If the matrix is square, this representation may be used
in `torch.linalg.lu_solve()` to solve system of linear equations that share
the matrix `A`.

The returned decomposition is represented as a named tuple (LU, pivots). The
`LU` matrix has the same shape as the input matrix `A`. Its upper and lower
triangular parts encode the non-constant elements of `L` and `U` of the LU
decomposition of `A`.

The returned permutation matrix is represented by a 1-indexed vector.
pivots[i] == j represents that in the i-th step of the algorithm, the i-th row
was permuted with the j-1-th row.

On CUDA, one may use `pivot`= False. In this case, this function returns the
LU decomposition without pivoting if it exists.

Supports inputs of float, double, cfloat and cdouble dtypes. Also supports
batches of matrices, and if the inputs are batches of matrices then the output
has the same batch dimensions.

Note

When inputs are on a CUDA device, this function synchronizes that device with
the CPU. For a version of this function that does not synchronize, see
`torch.linalg.lu_factor_ex()`.

Warning

The LU decomposition is almost never unique, as often there are different
permutation matrices that can yield different LU decompositions. As such,
different platforms, like SciPy, or inputs on different devices, may produce
different valid decompositions.

Gradient computations are only supported if the input matrix is full-rank. If
this condition is not met, no error will be thrown, but the gradient may not
be finite. This is because the LU decomposition with pivoting is not
differentiable at these points.

See also

`torch.linalg.lu_solve()` solves a system of linear equations given the output
of this function provided the input matrix was square and invertible.

`torch.lu_unpack()` unpacks the tensors returned by `lu_factor()` into the
three matrices P, L, U that form the decomposition.

`torch.linalg.lu()` computes the LU decomposition with partial pivoting of a
possibly non-square matrix. It is a composition of `lu_factor()` and
`torch.lu_unpack()`.

`torch.linalg.solve()` solves a system of linear equations. It is a
composition of `lu_factor()` and `lu_solve()`.

Parameters

    

**A** ( _Tensor_) – tensor of shape (*, m, n) where * is zero or more batch
dimensions.

Keyword Arguments

    

  * **pivot** ( _bool_ _,_ _optional_ ) – Whether to compute the LU decomposition with partial pivoting, or the regular LU decomposition. `pivot`= False not supported on CPU. Default: True.

  * **out** ( _tuple_ _,_ _optional_ ) – tuple of two tensors to write the output to. Ignored if None. Default: None.

Returns

    

A named tuple (LU, pivots).

Raises

    

**RuntimeError** – if the `A` matrix is not invertible or any matrix in a
batched `A` is not invertible.

Examples:

    
    
    >>> A = torch.randn(2, 3, 3)
    >>> B1 = torch.randn(2, 3, 4)
    >>> B2 = torch.randn(2, 3, 7)
    >>> A_factor = torch.linalg.lu_factor(A)
    >>> X1 = torch.linalg.lu_solve(A_factor, B1)
    >>> X2 = torch.linalg.lu_solve(A_factor, B2)
    >>> torch.allclose(A @ X1, B1)
    True
    >>> torch.allclose(A @ X2, B2)
    True
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.linalg.lu_factor
    * `lu_factor()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

