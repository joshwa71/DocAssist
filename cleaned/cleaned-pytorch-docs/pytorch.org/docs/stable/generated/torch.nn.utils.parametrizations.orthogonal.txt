

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * torch.nn.utils.parametrizations.orthogonal
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.nn.utils.parametrizations.orthogonal¶

torch.nn.utils.parametrizations.orthogonal( _module_ , _name ='weight'_,
_orthogonal_map =None_, _*_ , _use_trivialization =True_)[source]¶

    

Applies an orthogonal or unitary parametrization to a matrix or a batch of
matrices.

Letting K\mathbb{K}K be R\mathbb{R}R or C\mathbb{C}C, the parametrized matrix
Q∈Km×nQ \in \mathbb{K}^{m \times n}Q∈Km×n is **orthogonal** as

QHQ=Inif m≥nQQH=Imif m<n\begin{align*} Q^{\text{H}}Q &= \mathrm{I}_n
\mathrlap{\qquad \text{if }m \geq n}\\\ QQ^{\text{H}} &= \mathrm{I}_m
\mathrlap{\qquad \text{if }m < n} \end{align*}QHQQQH​=In​if m≥n=Im​if m<n​

where QHQ^{\text{H}}QH is the conjugate transpose when QQQ is complex and the
transpose when QQQ is real-valued, and In\mathrm{I}_nIn​ is the n-dimensional
identity matrix. In plain words, QQQ will have orthonormal columns whenever
m≥nm \geq nm≥n and orthonormal rows otherwise.

If the tensor has more than two dimensions, we consider it as a batch of
matrices of shape (…, m, n).

The matrix QQQ may be parametrized via three different `orthogonal_map` in
terms of the original tensor:

  * `"matrix_exp"`/`"cayley"`: the `matrix_exp()` Q=exp⁡(A)Q = \exp(A)Q=exp(A) and the Cayley map Q=(In+A/2)(In−A/2)−1Q = (\mathrm{I}_n + A/2)(\mathrm{I}_n - A/2)^{-1}Q=(In​+A/2)(In​−A/2)−1 are applied to a skew-symmetric AAA to give an orthogonal matrix.

  * `"householder"`: computes a product of Householder reflectors (`householder_product()`).

`"matrix_exp"`/`"cayley"` often make the parametrized weight converge faster
than `"householder"`, but they are slower to compute for very thin or very
wide matrices.

If `use_trivialization=True` (default), the parametrization implements the
“Dynamic Trivialization Framework”, where an extra matrix B∈Kn×nB \in
\mathbb{K}^{n \times n}B∈Kn×n is stored under
`module.parametrizations.weight[0].base`. This helps the convergence of the
parametrized layer at the expense of some extra memory use. See
Trivializations for Gradient-Based Optimization on Manifolds .

Initial value of QQQ: If the original tensor is not parametrized and
`use_trivialization=True` (default), the initial value of QQQ is that of the
original tensor if it is orthogonal (or unitary in the complex case) and it is
orthogonalized via the QR decomposition otherwise (see `torch.linalg.qr()`).
Same happens when it is not parametrized and `orthogonal_map="householder"`
even when `use_trivialization=False`. Otherwise, the initial value is the
result of the composition of all the registered parametrizations applied to
the original tensor.

Note

This function is implemented using the parametrization functionality in
`register_parametrization()`.

Parameters

    

  * **module** ( _nn.Module_) – module on which to register the parametrization.

  * **name** ( _str_ _,_ _optional_ ) – name of the tensor to make orthogonal. Default: `"weight"`.

  * **orthogonal_map** ( _str_ _,_ _optional_ ) – One of the following: `"matrix_exp"`, `"cayley"`, `"householder"`. Default: `"matrix_exp"` if the matrix is square or complex, `"householder"` otherwise.

  * **use_trivialization** ( _bool_ _,_ _optional_ ) – whether to use the dynamic trivialization framework. Default: `True`.

Returns

    

The original module with an orthogonal parametrization registered to the
specified weight

Return type

    

_Module_

Example:

    
    
    >>> orth_linear = orthogonal(nn.Linear(20, 40))
    >>> orth_linear
    ParametrizedLinear(
    in_features=20, out_features=40, bias=True
    (parametrizations): ModuleDict(
        (weight): ParametrizationList(
        (0): _Orthogonal()
        )
    )
    )
    >>> Q = orth_linear.weight
    >>> torch.dist(Q.T @ Q, torch.eye(20))
    tensor(4.9332e-07)
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.nn.utils.parametrizations.orthogonal
    * `orthogonal()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

