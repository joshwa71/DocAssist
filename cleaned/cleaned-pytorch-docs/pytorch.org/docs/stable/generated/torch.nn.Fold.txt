

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * Fold
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# Fold¶

_class _torch.nn.Fold( _output_size_ , _kernel_size_ , _dilation =1_, _padding
=0_, _stride =1_)[source]¶

    

Combines an array of sliding local blocks into a large containing tensor.

Consider a batched `input` tensor containing sliding local blocks, e.g.,
patches of images, of shape (N,C×∏(kernel_size),L)(N, C \times
\prod(\text{kernel\\_size}), L)(N,C×∏(kernel_size),L), where NNN is batch
dimension, C×∏(kernel_size)C \times
\prod(\text{kernel\\_size})C×∏(kernel_size) is the number of values within a
block (a block has ∏(kernel_size)\prod(\text{kernel\\_size})∏(kernel_size)
spatial locations each containing a CCC-channeled vector), and LLL is the
total number of blocks. (This is exactly the same specification as the output
shape of `Unfold`.) This operation combines these local blocks into the large
`output` tensor of shape (N,C,output_size[0],output_size[1],… )(N, C,
\text{output\\_size}[0], \text{output\\_size}[1],
\dots)(N,C,output_size[0],output_size[1],…) by summing the overlapping values.
Similar to `Unfold`, the arguments must satisfy

L=∏d⌊output_size[d]+2×padding[d]−dilation[d]×(kernel_size[d]−1)−1stride[d]+1⌋,L
= \prod_d \left\lfloor\frac{\text{output\\_size}[d] + 2 \times
\text{padding}[d] % \- \text{dilation}[d] \times (\text{kernel\\_size}[d] - 1)
- 1}{\text{stride}[d]} + 1\right\rfloor,
L=d∏​⌊stride[d]output_size[d]+2×padding[d]−dilation[d]×(kernel_size[d]−1)−1​+1⌋,

where ddd is over all spatial dimensions.

  * `output_size` describes the spatial shape of the large containing tensor of the sliding local blocks. It is useful to resolve the ambiguity when multiple input shapes map to same number of sliding blocks, e.g., with `stride > 0`.

The `padding`, `stride` and `dilation` arguments specify how the sliding
blocks are retrieved.

  * `stride` controls the stride for the sliding blocks.

  * `padding` controls the amount of implicit zero-paddings on both sides for `padding` number of points for each dimension before reshaping.

  * `dilation` controls the spacing between the kernel points; also known as the à trous algorithm. It is harder to describe, but this link has a nice visualization of what `dilation` does.

Parameters

    

  * **output_size** ( _int_ _or_ _tuple_) – the shape of the spatial dimensions of the output (i.e., `output.sizes()[2:]`)

  * **kernel_size** ( _int_ _or_ _tuple_) – the size of the sliding blocks

  * **dilation** ( _int_ _or_ _tuple_ _,_ _optional_ ) – a parameter that controls the stride of elements within the neighborhood. Default: 1

  * **padding** ( _int_ _or_ _tuple_ _,_ _optional_ ) – implicit zero padding to be added on both sides of input. Default: 0

  * **stride** ( _int_ _or_ _tuple_) – the stride of the sliding blocks in the input spatial dimensions. Default: 1

  * If `output_size`, `kernel_size`, `dilation`, `padding` or `stride` is an int or a tuple of length 1 then their values will be replicated across all spatial dimensions.

  * For the case of two output spatial dimensions this operation is sometimes called `col2im`.

Note

`Fold` calculates each combined value in the resulting large tensor by summing
all values from all containing blocks. `Unfold` extracts the values in the
local blocks by copying from the large tensor. So, if the blocks overlap, they
are not inverses of each other.

In general, folding and unfolding operations are related as follows. Consider
`Fold` and `Unfold` instances created with the same parameters:

    
    
    >>> fold_params = dict(kernel_size=..., dilation=..., padding=..., stride=...)
    >>> fold = nn.Fold(output_size=..., **fold_params)
    >>> unfold = nn.Unfold(**fold_params)
    

Then for any (supported) `input` tensor the following equality holds:

    
    
    fold(unfold(input)) == divisor * input
    

where `divisor` is a tensor that depends only on the shape and dtype of the
`input`:

    
    
    >>> input_ones = torch.ones(input.shape, dtype=input.dtype)
    >>> divisor = fold(unfold(input_ones))
    

When the `divisor` tensor contains no zero elements, then `fold` and `unfold`
operations are inverses of each other (up to constant divisor).

Warning

Currently, only unbatched (3D) or batched (4D) image-like output tensors are
supported.

Shape:

    

  * Input: (N,C×∏(kernel_size),L)(N, C \times \prod(\text{kernel\\_size}), L)(N,C×∏(kernel_size),L) or (C×∏(kernel_size),L)(C \times \prod(\text{kernel\\_size}), L)(C×∏(kernel_size),L)

  * Output: (N,C,output_size[0],output_size[1],… )(N, C, \text{output\\_size}[0], \text{output\\_size}[1], \dots)(N,C,output_size[0],output_size[1],…) or (C,output_size[0],output_size[1],… )(C, \text{output\\_size}[0], \text{output\\_size}[1], \dots)(C,output_size[0],output_size[1],…) as described above

Examples:

    
    
    >>> fold = nn.Fold(output_size=(4, 5), kernel_size=(2, 2))
    >>> input = torch.randn(1, 3 * 2 * 2, 12)
    >>> output = fold(input)
    >>> output.size()
    torch.Size([1, 3, 4, 5])
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * Fold
    * `Fold`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

