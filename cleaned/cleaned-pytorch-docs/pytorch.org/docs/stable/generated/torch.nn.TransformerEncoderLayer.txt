

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * TransformerEncoderLayer
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# TransformerEncoderLayer¶

_class _torch.nn.TransformerEncoderLayer( _d_model_ , _nhead_ ,
_dim_feedforward=2048_ , _dropout=0.1_ , _activation= <function relu>_,
_layer_norm_eps=1e-05_ , _batch_first=False_ , _norm_first=False_ ,
_bias=True_ , _device=None_ , _dtype=None_ )[source]¶

    

TransformerEncoderLayer is made up of self-attn and feedforward network. This
standard encoder layer is based on the paper “Attention Is All You Need”.
Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan
N Gomez, Lukasz Kaiser, and Illia Polosukhin. 2017. Attention is all you need.
In Advances in Neural Information Processing Systems, pages 6000-6010. Users
may modify or implement in a different way during application.

TransformerEncoderLayer can handle either traditional torch.tensor inputs, or
Nested Tensor inputs. Derived classes are expected to similarly accept both
input formats. (Not all combinations of inputs are currently supported by
TransformerEncoderLayer while Nested Tensor is in prototype state.)

If you are implementing a custom layer, you may derive it either from the
Module or TransformerEncoderLayer class. If your custom layer supports both
torch.Tensors and Nested Tensors inputs, make its implementation a derived
class of TransformerEncoderLayer. If your custom Layer supports only
torch.Tensor inputs, derive its implementation from Module.

Parameters

    

  * **d_model** ( _int_) – the number of expected features in the input (required).

  * **nhead** ( _int_) – the number of heads in the multiheadattention models (required).

  * **dim_feedforward** ( _int_) – the dimension of the feedforward network model (default=2048).

  * **dropout** ( _float_) – the dropout value (default=0.1).

  * **activation** ( _Union_ _[_ _str_ _,_ _Callable_ _[_ _[_ _Tensor_ _]_ _,_ _Tensor_ _]_ _]_ ) – the activation function of the intermediate layer, can be a string (“relu” or “gelu”) or a unary callable. Default: relu

  * **layer_norm_eps** ( _float_) – the eps value in layer normalization components (default=1e-5).

  * **batch_first** ( _bool_) – If `True`, then the input and output tensors are provided as (batch, seq, feature). Default: `False` (seq, batch, feature).

  * **norm_first** ( _bool_) – if `True`, layer norm is done prior to attention and feedforward operations, respectively. Otherwise it’s done after. Default: `False` (after).

  * **bias** ( _bool_) – If set to `False`, `Linear` and `LayerNorm` layers will not learn an additive bias. Default: `True`.

Examples::

    
    
    
    >>> encoder_layer = nn.TransformerEncoderLayer(d_model=512, nhead=8)
    >>> src = torch.rand(10, 32, 512)
    >>> out = encoder_layer(src)
    

Alternatively, when `batch_first` is `True`:

    
    
    
    >>> encoder_layer = nn.TransformerEncoderLayer(d_model=512, nhead=8, batch_first=True)
    >>> src = torch.rand(32, 10, 512)
    >>> out = encoder_layer(src)
    

Fast path:

    

forward() will use a special optimized implementation described in
FlashAttention: Fast and Memory-Efficient Exact Attention with IO-Awareness if
all of the following conditions are met:

  * Either autograd is disabled (using `torch.inference_mode` or `torch.no_grad`) or no tensor argument `requires_grad`

  * training is disabled (using `.eval()`)

  * batch_first is `True` and the input is batched (i.e., `src.dim() == 3`)

  * activation is one of: `"relu"`, `"gelu"`, `torch.functional.relu`, or `torch.functional.gelu`

  * at most one of `src_mask` and `src_key_padding_mask` is passed

  * if src is a NestedTensor, neither `src_mask` nor `src_key_padding_mask` is passed

  * the two `LayerNorm` instances have a consistent `eps` value (this will naturally be the case unless the caller has manually modified one without modifying the other)

If the optimized implementation is in use, a NestedTensor can be passed for
`src` to represent padding more efficiently than using a padding mask. In this
case, a NestedTensor will be returned, and an additional speedup proportional
to the fraction of the input that is padding can be expected.

forward( _src_ , _src_mask =None_, _src_key_padding_mask =None_, _is_causal
=False_)[source]¶

    

Pass the input through the encoder layer.

Parameters

    

  * **src** ( _Tensor_) – the sequence to the encoder layer (required).

  * **src_mask** ( _Optional_ _[_ _Tensor_ _]_ ) – the mask for the src sequence (optional).

  * **src_key_padding_mask** ( _Optional_ _[_ _Tensor_ _]_ ) – the mask for the src keys per batch (optional).

  * **is_causal** ( _bool_) – If specified, applies a causal mask as `src mask`. Default: `False`. Warning: `is_causal` provides a hint that `src_mask` is the causal mask. Providing incorrect hints can result in incorrect execution, including forward and backward compatibility.

Return type

    

_Tensor_

Shape:

    

see the docs in Transformer class.

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * TransformerEncoderLayer
    * `TransformerEncoderLayer`
      * `TransformerEncoderLayer.forward()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

