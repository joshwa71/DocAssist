

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * EmbeddingBag
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# EmbeddingBag¶

_class _torch.nn.EmbeddingBag( _num_embeddings_ , _embedding_dim_ , _max_norm
=None_, _norm_type =2.0_, _scale_grad_by_freq =False_, _mode ='mean'_, _sparse
=False_, __weight =None_, _include_last_offset =False_, _padding_idx =None_,
_device =None_, _dtype =None_)[source]¶

    

Computes sums or means of ‘bags’ of embeddings, without instantiating the
intermediate embeddings.

For bags of constant length, no `per_sample_weights`, no indices equal to
`padding_idx`, and with 2D inputs, this class

>   * with `mode="sum"` is equivalent to `Embedding` followed by
> `torch.sum(dim=1)`,
>
>   * with `mode="mean"` is equivalent to `Embedding` followed by
> `torch.mean(dim=1)`,
>
>   * with `mode="max"` is equivalent to `Embedding` followed by
> `torch.max(dim=1)`.
>
>

However, `EmbeddingBag` is much more time and memory efficient than using a
chain of these operations.

EmbeddingBag also supports per-sample weights as an argument to the forward
pass. This scales the output of the Embedding before performing a weighted
reduction as specified by `mode`. If `per_sample_weights` is passed, the only
supported `mode` is `"sum"`, which computes a weighted sum according to
`per_sample_weights`.

Parameters

    

  * **num_embeddings** ( _int_) – size of the dictionary of embeddings

  * **embedding_dim** ( _int_) – the size of each embedding vector

  * **max_norm** ( _float_ _,_ _optional_ ) – If given, each embedding vector with norm larger than `max_norm` is renormalized to have norm `max_norm`.

  * **norm_type** ( _float_ _,_ _optional_ ) – The p of the p-norm to compute for the `max_norm` option. Default `2`.

  * **scale_grad_by_freq** ( _bool_ _,_ _optional_ ) – if given, this will scale gradients by the inverse of frequency of the words in the mini-batch. Default `False`. Note: this option is not supported when `mode="max"`.

  * **mode** ( _str_ _,_ _optional_ ) – `"sum"`, `"mean"` or `"max"`. Specifies the way to reduce the bag. `"sum"` computes the weighted sum, taking `per_sample_weights` into consideration. `"mean"` computes the average of the values in the bag, `"max"` computes the max value over each bag. Default: `"mean"`

  * **sparse** ( _bool_ _,_ _optional_ ) – if `True`, gradient w.r.t. `weight` matrix will be a sparse tensor. See Notes for more details regarding sparse gradients. Note: this option is not supported when `mode="max"`.

  * **include_last_offset** ( _bool_ _,_ _optional_ ) – if `True`, `offsets` has one additional element, where the last element is equivalent to the size of indices. This matches the CSR format.

  * **padding_idx** ( _int_ _,_ _optional_ ) – If specified, the entries at `padding_idx` do not contribute to the gradient; therefore, the embedding vector at `padding_idx` is not updated during training, i.e. it remains as a fixed “pad”. For a newly constructed EmbeddingBag, the embedding vector at `padding_idx` will default to all zeros, but can be updated to another value to be used as the padding vector. Note that the embedding vector at `padding_idx` is excluded from the reduction.

Variables

    

**weight** ( _Tensor_) – the learnable weights of the module of shape
(num_embeddings, embedding_dim) initialized from N(0,1)\mathcal{N}(0,
1)N(0,1).

Examples:

    
    
    >>> # an EmbeddingBag module containing 10 tensors of size 3
    >>> embedding_sum = nn.EmbeddingBag(10, 3, mode='sum')
    >>> # a batch of 2 samples of 4 indices each
    >>> input = torch.tensor([1, 2, 4, 5, 4, 3, 2, 9], dtype=torch.long)
    >>> offsets = torch.tensor([0, 4], dtype=torch.long)
    >>> embedding_sum(input, offsets)
    tensor([[-0.8861, -5.4350, -0.0523],
            [ 1.1306, -2.5798, -1.0044]])
    
    >>> # Example with padding_idx
    >>> embedding_sum = nn.EmbeddingBag(10, 3, mode='sum', padding_idx=2)
    >>> input = torch.tensor([2, 2, 2, 2, 4, 3, 2, 9], dtype=torch.long)
    >>> offsets = torch.tensor([0, 4], dtype=torch.long)
    >>> embedding_sum(input, offsets)
    tensor([[ 0.0000,  0.0000,  0.0000],
            [-0.7082,  3.2145, -2.6251]])
    
    >>> # An EmbeddingBag can be loaded from an Embedding like so
    >>> embedding = nn.Embedding(10, 3, padding_idx=2)
    >>> embedding_sum = nn.EmbeddingBag.from_pretrained(
            embedding.weight,
            padding_idx=embedding.padding_idx,
            mode='sum')
    

forward( _input_ , _offsets =None_, _per_sample_weights =None_)[source]¶

    

Forward pass of EmbeddingBag.

Parameters

    

  * **input** ( _Tensor_) – Tensor containing bags of indices into the embedding matrix.

  * **offsets** ( _Tensor_ _,_ _optional_ ) – Only used when `input` is 1D. `offsets` determines the starting index position of each bag (sequence) in `input`.

  * **per_sample_weights** ( _Tensor_ _,_ _optional_ ) – a tensor of float / double weights, or None to indicate all weights should be taken to be `1`. If specified, `per_sample_weights` must have exactly the same shape as input and is treated as having the same `offsets`, if those are not `None`. Only supported for `mode='sum'`.

Returns

    

Tensor output shape of (B, embedding_dim).

Return type

    

_Tensor_

Note

A few notes about `input` and `offsets`:

  * `input` and `offsets` have to be of the same type, either int or long

  * If `input` is 2D of shape (B, N), it will be treated as `B` bags (sequences) each of fixed length `N`, and this will return `B` values aggregated in a way depending on the `mode`. `offsets` is ignored and required to be `None` in this case.

  * If `input` is 1D of shape (N), it will be treated as a concatenation of multiple bags (sequences). `offsets` is required to be a 1D tensor containing the starting index positions of each bag in `input`. Therefore, for `offsets` of shape (B), `input` will be viewed as having `B` bags. Empty bags (i.e., having 0-length) will have returned vectors filled by zeros.

_classmethod _from_pretrained( _embeddings_ , _freeze =True_, _max_norm
=None_, _norm_type =2.0_, _scale_grad_by_freq =False_, _mode ='mean'_, _sparse
=False_, _include_last_offset =False_, _padding_idx =None_)[source]¶

    

Creates EmbeddingBag instance from given 2-dimensional FloatTensor.

Parameters

    

  * **embeddings** ( _Tensor_) – FloatTensor containing weights for the EmbeddingBag. First dimension is being passed to EmbeddingBag as ‘num_embeddings’, second as ‘embedding_dim’.

  * **freeze** ( _bool_ _,_ _optional_ ) – If `True`, the tensor does not get updated in the learning process. Equivalent to `embeddingbag.weight.requires_grad = False`. Default: `True`

  * **max_norm** ( _float_ _,_ _optional_ ) – See module initialization documentation. Default: `None`

  * **norm_type** ( _float_ _,_ _optional_ ) – See module initialization documentation. Default `2`.

  * **scale_grad_by_freq** ( _bool_ _,_ _optional_ ) – See module initialization documentation. Default `False`.

  * **mode** ( _str_ _,_ _optional_ ) – See module initialization documentation. Default: `"mean"`

  * **sparse** ( _bool_ _,_ _optional_ ) – See module initialization documentation. Default: `False`.

  * **include_last_offset** ( _bool_ _,_ _optional_ ) – See module initialization documentation. Default: `False`.

  * **padding_idx** ( _int_ _,_ _optional_ ) – See module initialization documentation. Default: `None`.

Return type

    

_EmbeddingBag_

Examples:

    
    
    >>> # FloatTensor containing pretrained weights
    >>> weight = torch.FloatTensor([[1, 2.3, 3], [4, 5.1, 6.3]])
    >>> embeddingbag = nn.EmbeddingBag.from_pretrained(weight)
    >>> # Get embeddings for index 1
    >>> input = torch.LongTensor([[1, 0]])
    >>> embeddingbag(input)
    tensor([[ 2.5000,  3.7000,  4.6500]])
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * EmbeddingBag
    * `EmbeddingBag`
      * `EmbeddingBag.forward()`
      * `EmbeddingBag.from_pretrained()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

