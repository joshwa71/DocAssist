

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * Automatic differentiation package - torch.autograd >
  * torch.autograd.functional.jacobian
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.autograd.functional.jacobian¶

torch.autograd.functional.jacobian( _func_ , _inputs_ , _create_graph =False_,
_strict =False_, _vectorize =False_, _strategy ='reverse-mode'_)[source]¶

    

Function that computes the Jacobian of a given function.

Parameters

    

  * **func** ( _function_ ) – a Python function that takes Tensor inputs and returns a tuple of Tensors or a Tensor.

  * **inputs** ( _tuple_ _of_ _Tensors_ _or_ _Tensor_) – inputs to the function `func`.

  * **create_graph** ( _bool_ _,_ _optional_ ) – If `True`, the Jacobian will be computed in a differentiable manner. Note that when `strict` is `False`, the result can not require gradients or be disconnected from the inputs. Defaults to `False`.

  * **strict** ( _bool_ _,_ _optional_ ) – If `True`, an error will be raised when we detect that there exists an input such that all the outputs are independent of it. If `False`, we return a Tensor of zeros as the jacobian for said inputs, which is the expected mathematical value. Defaults to `False`.

  * **vectorize** ( _bool_ _,_ _optional_ ) – This feature is experimental. Please consider using `torch.func.jacrev()` or `torch.func.jacfwd()` instead if you are looking for something less experimental and more performant. When computing the jacobian, usually we invoke `autograd.grad` once per row of the jacobian. If this flag is `True`, we perform only a single `autograd.grad` call with `batched_grad=True` which uses the vmap prototype feature. Though this should lead to performance improvements in many cases, because this feature is still experimental, there may be performance cliffs. See `torch.autograd.grad()`’s `batched_grad` parameter for more information.

  * **strategy** ( _str_ _,_ _optional_ ) – Set to `"forward-mode"` or `"reverse-mode"` to determine whether the Jacobian will be computed with forward or reverse mode AD. Currently, `"forward-mode"` requires `vectorized=True`. Defaults to `"reverse-mode"`. If `func` has more outputs than inputs, `"forward-mode"` tends to be more performant. Otherwise, prefer to use `"reverse-mode"`.

Returns

    

if there is a single input and output, this will be a single Tensor containing
the Jacobian for the linearized inputs and output. If one of the two is a
tuple, then the Jacobian will be a tuple of Tensors. If both of them are
tuples, then the Jacobian will be a tuple of tuple of Tensors where
`Jacobian[i][j]` will contain the Jacobian of the `i`th output and `j`th input
and will have as size the concatenation of the sizes of the corresponding
output and the corresponding input and will have same dtype and device as the
corresponding input. If strategy is `forward-mode`, the dtype will be that of
the output; otherwise, the input.

Return type

    

Jacobian (Tensor or nested tuple of Tensors)

Example

    
    
    >>> def exp_reducer(x):
    ...     return x.exp().sum(dim=1)
    >>> inputs = torch.rand(2, 2)
    >>> jacobian(exp_reducer, inputs)
    tensor([[[1.4917, 2.4352],
             [0.0000, 0.0000]],
            [[0.0000, 0.0000],
             [2.4369, 2.3799]]])
    
    
    
    >>> jacobian(exp_reducer, inputs, create_graph=True)
    tensor([[[1.4917, 2.4352],
             [0.0000, 0.0000]],
            [[0.0000, 0.0000],
             [2.4369, 2.3799]]], grad_fn=<ViewBackward>)
    
    
    
    >>> def exp_adder(x, y):
    ...     return 2 * x.exp() + 3 * y
    >>> inputs = (torch.rand(2), torch.rand(2))
    >>> jacobian(exp_adder, inputs)
    (tensor([[2.8052, 0.0000],
            [0.0000, 3.3963]]),
     tensor([[3., 0.],
             [0., 3.]]))
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.autograd.functional.jacobian
    * `jacobian()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

