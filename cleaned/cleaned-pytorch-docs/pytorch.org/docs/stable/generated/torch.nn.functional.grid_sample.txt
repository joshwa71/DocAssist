

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn.functional >
  * torch.nn.functional.grid_sample
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.nn.functional.grid_sample¶

torch.nn.functional.grid_sample( _input_ , _grid_ , _mode ='bilinear'_,
_padding_mode ='zeros'_, _align_corners =None_)[source]¶

    

Given an `input` and a flow-field `grid`, computes the `output` using `input`
values and pixel locations from `grid`.

Currently, only spatial (4-D) and volumetric (5-D) `input` are supported.

In the spatial (4-D) case, for `input` with shape (N,C,Hin,Win)(N, C,
H_\text{in}, W_\text{in})(N,C,Hin​,Win​) and `grid` with shape
(N,Hout,Wout,2)(N, H_\text{out}, W_\text{out}, 2)(N,Hout​,Wout​,2), the output
will have shape (N,C,Hout,Wout)(N, C, H_\text{out},
W_\text{out})(N,C,Hout​,Wout​).

For each output location `output[n, :, h, w]`, the size-2 vector `grid[n, h,
w]` specifies `input` pixel locations `x` and `y`, which are used to
interpolate the output value `output[n, :, h, w]`. In the case of 5D inputs,
`grid[n, d, h, w]` specifies the `x`, `y`, `z` pixel locations for
interpolating `output[n, :, d, h, w]`. `mode` argument specifies `nearest` or
`bilinear` interpolation method to sample the input pixels.

`grid` specifies the sampling pixel locations normalized by the `input`
spatial dimensions. Therefore, it should have most values in the range of
`[-1, 1]`. For example, values `x = -1, y = -1` is the left-top pixel of
`input`, and values `x = 1, y = 1` is the right-bottom pixel of `input`.

If `grid` has values outside the range of `[-1, 1]`, the corresponding outputs
are handled as defined by `padding_mode`. Options are

>   * `padding_mode="zeros"`: use `0` for out-of-bound grid locations,
>
>   * `padding_mode="border"`: use border values for out-of-bound grid
> locations,
>
>   * `padding_mode="reflection"`: use values at locations reflected by the
> border for out-of-bound grid locations. For location far away from the
> border, it will keep being reflected until becoming in bound, e.g.,
> (normalized) pixel location `x = -3.5` reflects by border `-1` and becomes
> `x' = 1.5`, then reflects by border `1` and becomes `x'' = -0.5`.
>
>

Note

This function is often used in conjunction with `affine_grid()` to build
Spatial Transformer Networks .

Note

When using the CUDA backend, this operation may induce nondeterministic
behaviour in its backward pass that is not easily switched off. Please see the
notes on Reproducibility for background.

Note

NaN values in `grid` would be interpreted as `-1`.

Parameters

    

  * **input** ( _Tensor_) – input of shape (N,C,Hin,Win)(N, C, H_\text{in}, W_\text{in})(N,C,Hin​,Win​) (4-D case) or (N,C,Din,Hin,Win)(N, C, D_\text{in}, H_\text{in}, W_\text{in})(N,C,Din​,Hin​,Win​) (5-D case)

  * **grid** ( _Tensor_) – flow-field of shape (N,Hout,Wout,2)(N, H_\text{out}, W_\text{out}, 2)(N,Hout​,Wout​,2) (4-D case) or (N,Dout,Hout,Wout,3)(N, D_\text{out}, H_\text{out}, W_\text{out}, 3)(N,Dout​,Hout​,Wout​,3) (5-D case)

  * **mode** ( _str_) – interpolation mode to calculate output values `'bilinear'` | `'nearest'` | `'bicubic'`. Default: `'bilinear'` Note: `mode='bicubic'` supports only 4-D input. When `mode='bilinear'` and the input is 5-D, the interpolation mode used internally will actually be trilinear. However, when the input is 4-D, the interpolation mode will legitimately be bilinear.

  * **padding_mode** ( _str_) – padding mode for outside grid values `'zeros'` | `'border'` | `'reflection'`. Default: `'zeros'`

  * **align_corners** ( _bool_ _,_ _optional_ ) – Geometrically, we consider the pixels of the input as squares rather than points. If set to `True`, the extrema (`-1` and `1`) are considered as referring to the center points of the input’s corner pixels. If set to `False`, they are instead considered as referring to the corner points of the input’s corner pixels, making the sampling more resolution agnostic. This option parallels the `align_corners` option in `interpolate()`, and so whichever option is used here should also be used there to resize the input image before grid sampling. Default: `False`

Returns

    

output Tensor

Return type

    

output (Tensor)

Warning

When `align_corners = True`, the grid positions depend on the pixel size
relative to the input image size, and so the locations sampled by
`grid_sample()` will differ for the same input given at different resolutions
(that is, after being upsampled or downsampled). The default behavior up to
version 1.2.0 was `align_corners = True`. Since then, the default behavior has
been changed to `align_corners = False`, in order to bring it in line with the
default for `interpolate()`.

Note

`mode='bicubic'` is implemented using the cubic convolution algorithm with
α=−0.75\alpha=-0.75α=−0.75. The constant α\alphaα might be different from
packages to packages. For example, PIL and OpenCV use -0.5 and -0.75
respectively. This algorithm may “overshoot” the range of values it’s
interpolating. For example, it may produce negative values or values greater
than 255 when interpolating input in [0, 255]. Clamp the results with
`torch.clamp()` to ensure they are within the valid range.

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.nn.functional.grid_sample
    * `grid_sample()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

