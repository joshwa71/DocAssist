

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.linalg >
  * torch.linalg.eig
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.linalg.eig¶

torch.linalg.eig( _A_ , _*_ , _out =None_)¶

    

Computes the eigenvalue decomposition of a square matrix if it exists.

Letting K\mathbb{K}K be R\mathbb{R}R or C\mathbb{C}C, the **eigenvalue
decomposition** of a square matrix A∈Kn×nA \in \mathbb{K}^{n \times n}A∈Kn×n
(if it exists) is defined as

A=Vdiag⁡(Λ)V−1V∈Cn×n,Λ∈CnA = V \operatorname{diag}(\Lambda)
V^{-1}\mathrlap{\qquad V \in \mathbb{C}^{n \times n}, \Lambda \in
\mathbb{C}^n}A=Vdiag(Λ)V−1V∈Cn×n,Λ∈Cn

This decomposition exists if and only if AAA is diagonalizable. This is the
case when all its eigenvalues are different.

Supports input of float, double, cfloat and cdouble dtypes. Also supports
batches of matrices, and if `A` is a batch of matrices then the output has the
same batch dimensions.

Note

The eigenvalues and eigenvectors of a real matrix may be complex.

Note

When inputs are on a CUDA device, this function synchronizes that device with
the CPU.

Warning

This function assumes that `A` is diagonalizable (for example, when all the
eigenvalues are different). If it is not diagonalizable, the returned
eigenvalues will be correct but A≠Vdiag⁡(Λ)V−1A \neq V
\operatorname{diag}(\Lambda)V^{-1}A=Vdiag(Λ)V−1.

Warning

The returned eigenvectors are normalized to have norm 1. Even then, the
eigenvectors of a matrix are not unique, nor are they continuous with respect
to `A`. Due to this lack of uniqueness, different hardware and software may
compute different eigenvectors.

This non-uniqueness is caused by the fact that multiplying an eigenvector by
by eiϕ,ϕ∈Re^{i \phi}, \phi \in \mathbb{R}eiϕ,ϕ∈R produces another set of valid
eigenvectors of the matrix. For this reason, the loss function shall not
depend on the phase of the eigenvectors, as this quantity is not well-defined.
This is checked when computing the gradients of this function. As such, when
inputs are on a CUDA device, this function synchronizes that device with the
CPU when computing the gradients. This is checked when computing the gradients
of this function. As such, when inputs are on a CUDA device, the computation
of the gradients of this function synchronizes that device with the CPU.

Warning

Gradients computed using the eigenvectors tensor will only be finite when `A`
has distinct eigenvalues. Furthermore, if the distance between any two
eigenvalues is close to zero, the gradient will be numerically unstable, as it
depends on the eigenvalues λi\lambda_iλi​ through the computation of
1min⁡i≠jλi−λj\frac{1}{\min_{i \neq j} \lambda_i - \lambda_j}mini=j​λi​−λj​1​.

See also

`torch.linalg.eigvals()` computes only the eigenvalues. Unlike
`torch.linalg.eig()`, the gradients of `eigvals()` are always numerically
stable.

`torch.linalg.eigh()` for a (faster) function that computes the eigenvalue
decomposition for Hermitian and symmetric matrices.

`torch.linalg.svd()` for a function that computes another type of spectral
decomposition that works on matrices of any shape.

`torch.linalg.qr()` for another (much faster) decomposition that works on
matrices of any shape.

Parameters

    

**A** ( _Tensor_) – tensor of shape (*, n, n) where * is zero or more batch
dimensions consisting of diagonalizable matrices.

Keyword Arguments

    

**out** ( _tuple_ _,_ _optional_ ) – output tuple of two tensors. Ignored if
None. Default: None.

Returns

    

A named tuple (eigenvalues, eigenvectors) which corresponds to Λ\LambdaΛ and
VVV above.

eigenvalues and eigenvectors will always be complex-valued, even when `A` is
real. The eigenvectors will be given by the columns of eigenvectors.

Examples:

    
    
    >>> A = torch.randn(2, 2, dtype=torch.complex128)
    >>> A
    tensor([[ 0.9828+0.3889j, -0.4617+0.3010j],
            [ 0.1662-0.7435j, -0.6139+0.0562j]], dtype=torch.complex128)
    >>> L, V = torch.linalg.eig(A)
    >>> L
    tensor([ 1.1226+0.5738j, -0.7537-0.1286j], dtype=torch.complex128)
    >>> V
    tensor([[ 0.9218+0.0000j,  0.1882-0.2220j],
            [-0.0270-0.3867j,  0.9567+0.0000j]], dtype=torch.complex128)
    >>> torch.dist(V @ torch.diag(L) @ torch.linalg.inv(V), A)
    tensor(7.7119e-16, dtype=torch.float64)
    
    >>> A = torch.randn(3, 2, 2, dtype=torch.float64)
    >>> L, V = torch.linalg.eig(A)
    >>> torch.dist(V @ torch.diag_embed(L) @ torch.linalg.inv(V), A)
    tensor(3.2841e-16, dtype=torch.float64)
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.linalg.eig
    * `eig()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

