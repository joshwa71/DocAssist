

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * LSTM
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# LSTM¶

_class _torch.nn.LSTM( _self_ , _input_size_ , _hidden_size_ , _num_layers
=1_, _bias =True_, _batch_first =False_, _dropout =0.0_, _bidirectional
=False_, _proj_size =0_, _device =None_, _dtype =None_)[source]¶

    

Applies a multi-layer long short-term memory (LSTM) RNN to an input sequence.

For each element in the input sequence, each layer computes the following
function:

it=σ(Wiixt+bii+Whiht−1+bhi)ft=σ(Wifxt+bif+Whfht−1+bhf)gt=tanh⁡(Wigxt+big+Whght−1+bhg)ot=σ(Wioxt+bio+Whoht−1+bho)ct=ft⊙ct−1+it⊙gtht=ot⊙tanh⁡(ct)\begin{array}{ll}
\\\ i_t = \sigma(W_{ii} x_t + b_{ii} + W_{hi} h_{t-1} + b_{hi}) \\\ f_t =
\sigma(W_{if} x_t + b_{if} + W_{hf} h_{t-1} + b_{hf}) \\\ g_t = \tanh(W_{ig}
x_t + b_{ig} + W_{hg} h_{t-1} + b_{hg}) \\\ o_t = \sigma(W_{io} x_t + b_{io} +
W_{ho} h_{t-1} + b_{ho}) \\\ c_t = f_t \odot c_{t-1} + i_t \odot g_t \\\ h_t =
o_t \odot \tanh(c_t) \\\ \end{array}
it​=σ(Wii​xt​+bii​+Whi​ht−1​+bhi​)ft​=σ(Wif​xt​+bif​+Whf​ht−1​+bhf​)gt​=tanh(Wig​xt​+big​+Whg​ht−1​+bhg​)ot​=σ(Wio​xt​+bio​+Who​ht−1​+bho​)ct​=ft​⊙ct−1​+it​⊙gt​ht​=ot​⊙tanh(ct​)​

where hth_tht​ is the hidden state at time t, ctc_tct​ is the cell state at
time t, xtx_txt​ is the input at time t, ht−1h_{t-1}ht−1​ is the hidden state
of the layer at time t-1 or the initial hidden state at time 0, and iti_tit​,
ftf_tft​, gtg_tgt​, oto_tot​ are the input, forget, cell, and output gates,
respectively. σ\sigmaσ is the sigmoid function, and ⊙\odot⊙ is the Hadamard
product.

In a multilayer LSTM, the input xt(l)x^{(l)}_txt(l)​ of the lll -th layer
(l≥2l \ge 2l≥2) is the hidden state ht(l−1)h^{(l-1)}_tht(l−1)​ of the previous
layer multiplied by dropout δt(l−1)\delta^{(l-1)}_tδt(l−1)​ where each
δt(l−1)\delta^{(l-1)}_tδt(l−1)​ is a Bernoulli random variable which is 000
with probability `dropout`.

If `proj_size > 0` is specified, LSTM with projections will be used. This
changes the LSTM cell in the following way. First, the dimension of hth_tht​
will be changed from `hidden_size` to `proj_size` (dimensions of WhiW_{hi}Whi​
will be changed accordingly). Second, the output hidden state of each layer
will be multiplied by a learnable projection matrix: ht=Whrhth_t =
W_{hr}h_tht​=Whr​ht​. Note that as a consequence of this, the output of LSTM
network will be of different shape as well. See Inputs/Outputs sections below
for exact dimensions of all variables. You can find more details in
https://arxiv.org/abs/1402.1128.

Parameters

    

  * **input_size** – The number of expected features in the input x

  * **hidden_size** – The number of features in the hidden state h

  * **num_layers** – Number of recurrent layers. E.g., setting `num_layers=2` would mean stacking two LSTMs together to form a stacked LSTM, with the second LSTM taking in outputs of the first LSTM and computing the final results. Default: 1

  * **bias** – If `False`, then the layer does not use bias weights b_ih and b_hh. Default: `True`

  * **batch_first** – If `True`, then the input and output tensors are provided as (batch, seq, feature) instead of (seq, batch, feature). Note that this does not apply to hidden or cell states. See the Inputs/Outputs sections below for details. Default: `False`

  * **dropout** – If non-zero, introduces a Dropout layer on the outputs of each LSTM layer except the last layer, with dropout probability equal to `dropout`. Default: 0

  * **bidirectional** – If `True`, becomes a bidirectional LSTM. Default: `False`

  * **proj_size** – If `> 0`, will use LSTM with projections of corresponding size. Default: 0

Inputs: input, (h_0, c_0)

    

  * **input** : tensor of shape (L,Hin)(L, H_{in})(L,Hin​) for unbatched input, (L,N,Hin)(L, N, H_{in})(L,N,Hin​) when `batch_first=False` or (N,L,Hin)(N, L, H_{in})(N,L,Hin​) when `batch_first=True` containing the features of the input sequence. The input can also be a packed variable length sequence. See `torch.nn.utils.rnn.pack_padded_sequence()` or `torch.nn.utils.rnn.pack_sequence()` for details.

  * **h_0** : tensor of shape (D∗num_layers,Hout)(D * \text{num\\_layers}, H_{out})(D∗num_layers,Hout​) for unbatched input or (D∗num_layers,N,Hout)(D * \text{num\\_layers}, N, H_{out})(D∗num_layers,N,Hout​) containing the initial hidden state for each element in the input sequence. Defaults to zeros if (h_0, c_0) is not provided.

  * **c_0** : tensor of shape (D∗num_layers,Hcell)(D * \text{num\\_layers}, H_{cell})(D∗num_layers,Hcell​) for unbatched input or (D∗num_layers,N,Hcell)(D * \text{num\\_layers}, N, H_{cell})(D∗num_layers,N,Hcell​) containing the initial cell state for each element in the input sequence. Defaults to zeros if (h_0, c_0) is not provided.

where:

N=batch sizeL=sequence lengthD=2 if bidirectional=True otherwise
1Hin=input_sizeHcell=hidden_sizeHout=proj_size if proj_size>0 otherwise
hidden_size\begin{aligned} N ={} & \text{batch size} \\\ L ={} &
\text{sequence length} \\\ D ={} & 2 \text{ if bidirectional=True otherwise }
1 \\\ H_{in} ={} & \text{input\\_size} \\\ H_{cell} ={} & \text{hidden\\_size}
\\\ H_{out} ={} & \text{proj\\_size if } \text{proj\\_size}>0 \text{ otherwise
hidden\\_size} \\\ \end{aligned} N=L=D=Hin​=Hcell​=Hout​=​batch sizesequence
length2 if bidirectional=True otherwise 1input_sizehidden_sizeproj_size if
proj_size>0 otherwise hidden_size​

Outputs: output, (h_n, c_n)

    

  * **output** : tensor of shape (L,D∗Hout)(L, D * H_{out})(L,D∗Hout​) for unbatched input, (L,N,D∗Hout)(L, N, D * H_{out})(L,N,D∗Hout​) when `batch_first=False` or (N,L,D∗Hout)(N, L, D * H_{out})(N,L,D∗Hout​) when `batch_first=True` containing the output features (h_t) from the last layer of the LSTM, for each t. If a `torch.nn.utils.rnn.PackedSequence` has been given as the input, the output will also be a packed sequence. When `bidirectional=True`, output will contain a concatenation of the forward and reverse hidden states at each time step in the sequence.

  * **h_n** : tensor of shape (D∗num_layers,Hout)(D * \text{num\\_layers}, H_{out})(D∗num_layers,Hout​) for unbatched input or (D∗num_layers,N,Hout)(D * \text{num\\_layers}, N, H_{out})(D∗num_layers,N,Hout​) containing the final hidden state for each element in the sequence. When `bidirectional=True`, h_n will contain a concatenation of the final forward and reverse hidden states, respectively.

  * **c_n** : tensor of shape (D∗num_layers,Hcell)(D * \text{num\\_layers}, H_{cell})(D∗num_layers,Hcell​) for unbatched input or (D∗num_layers,N,Hcell)(D * \text{num\\_layers}, N, H_{cell})(D∗num_layers,N,Hcell​) containing the final cell state for each element in the sequence. When `bidirectional=True`, c_n will contain a concatenation of the final forward and reverse cell states, respectively.

Variables

    

  * **weight_ih_l[k]** – the learnable input-hidden weights of the kth\text{k}^{th}kth layer (W_ii|W_if|W_ig|W_io), of shape (4*hidden_size, input_size) for k = 0. Otherwise, the shape is (4*hidden_size, num_directions * hidden_size). If `proj_size > 0` was specified, the shape will be (4*hidden_size, num_directions * proj_size) for k > 0

  * **weight_hh_l[k]** – the learnable hidden-hidden weights of the kth\text{k}^{th}kth layer (W_hi|W_hf|W_hg|W_ho), of shape (4*hidden_size, hidden_size). If `proj_size > 0` was specified, the shape will be (4*hidden_size, proj_size).

  * **bias_ih_l[k]** – the learnable input-hidden bias of the kth\text{k}^{th}kth layer (b_ii|b_if|b_ig|b_io), of shape (4*hidden_size)

  * **bias_hh_l[k]** – the learnable hidden-hidden bias of the kth\text{k}^{th}kth layer (b_hi|b_hf|b_hg|b_ho), of shape (4*hidden_size)

  * **weight_hr_l[k]** – the learnable projection weights of the kth\text{k}^{th}kth layer of shape (proj_size, hidden_size). Only present when `proj_size > 0` was specified.

  * **weight_ih_l[k]_reverse** – Analogous to weight_ih_l[k] for the reverse direction. Only present when `bidirectional=True`.

  * **weight_hh_l[k]_reverse** – Analogous to weight_hh_l[k] for the reverse direction. Only present when `bidirectional=True`.

  * **bias_ih_l[k]_reverse** – Analogous to bias_ih_l[k] for the reverse direction. Only present when `bidirectional=True`.

  * **bias_hh_l[k]_reverse** – Analogous to bias_hh_l[k] for the reverse direction. Only present when `bidirectional=True`.

  * **weight_hr_l[k]_reverse** – Analogous to weight_hr_l[k] for the reverse direction. Only present when `bidirectional=True` and `proj_size > 0` was specified.

Note

All the weights and biases are initialized from U(−k,k)\mathcal{U}(-\sqrt{k},
\sqrt{k})U(−k​,k​) where k=1hidden_sizek =
\frac{1}{\text{hidden\\_size}}k=hidden_size1​

Note

For bidirectional LSTMs, forward and backward are directions 0 and 1
respectively. Example of splitting the output layers when `batch_first=False`:
`output.view(seq_len, batch, num_directions, hidden_size)`.

Note

For bidirectional LSTMs, h_n is not equivalent to the last element of output;
the former contains the final forward and reverse hidden states, while the
latter contains the final forward hidden state and the initial reverse hidden
state.

Note

`batch_first` argument is ignored for unbatched inputs.

Note

`proj_size` should be smaller than `hidden_size`.

Warning

There are known non-determinism issues for RNN functions on some versions of
cuDNN and CUDA. You can enforce deterministic behavior by setting the
following environment variables:

On CUDA 10.1, set environment variable `CUDA_LAUNCH_BLOCKING=1`. This may
affect performance.

On CUDA 10.2 or later, set environment variable (note the leading colon
symbol) `CUBLAS_WORKSPACE_CONFIG=:16:8` or `CUBLAS_WORKSPACE_CONFIG=:4096:2`.

See the cuDNN 8 Release Notes for more information.

Note

If the following conditions are satisfied: 1) cudnn is enabled, 2) input data
is on the GPU 3) input data has dtype `torch.float16` 4) V100 GPU is used, 5)
input data is not in `PackedSequence` format persistent algorithm can be
selected to improve performance.

Examples:

    
    
    >>> rnn = nn.LSTM(10, 20, 2)
    >>> input = torch.randn(5, 3, 10)
    >>> h0 = torch.randn(2, 3, 20)
    >>> c0 = torch.randn(2, 3, 20)
    >>> output, (hn, cn) = rnn(input, (h0, c0))
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * LSTM
    * `LSTM`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

