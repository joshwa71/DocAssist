

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.linalg >
  * torch.linalg.svd
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.linalg.svd¶

torch.linalg.svd( _A_ , _full_matrices =True_, _*_ , _driver =None_, _out
=None_)¶

    

Computes the singular value decomposition (SVD) of a matrix.

Letting K\mathbb{K}K be R\mathbb{R}R or C\mathbb{C}C, the **full SVD** of a
matrix A∈Km×nA \in \mathbb{K}^{m \times n}A∈Km×n, if k = min(m,n), is defined
as

A=Udiag⁡(S)VHU∈Km×m,S∈Rk,V∈Kn×nA = U \operatorname{diag}(S) V^{\text{H}}
\mathrlap{\qquad U \in \mathbb{K}^{m \times m}, S \in \mathbb{R}^k, V \in
\mathbb{K}^{n \times n}}A=Udiag(S)VHU∈Km×m,S∈Rk,V∈Kn×n

where diag⁡(S)∈Km×n\operatorname{diag}(S) \in \mathbb{K}^{m \times
n}diag(S)∈Km×n, VHV^{\text{H}}VH is the conjugate transpose when VVV is
complex, and the transpose when VVV is real-valued. The matrices UUU, VVV (and
thus VHV^{\text{H}}VH) are orthogonal in the real case, and unitary in the
complex case.

When m > n (resp. m < n) we can drop the last m - n (resp. n - m) columns of U
(resp. V) to form the **reduced SVD** :

A=Udiag⁡(S)VHU∈Km×k,S∈Rk,V∈Kk×nA = U \operatorname{diag}(S) V^{\text{H}}
\mathrlap{\qquad U \in \mathbb{K}^{m \times k}, S \in \mathbb{R}^k, V \in
\mathbb{K}^{k \times n}}A=Udiag(S)VHU∈Km×k,S∈Rk,V∈Kk×n

where diag⁡(S)∈Kk×k\operatorname{diag}(S) \in \mathbb{K}^{k \times
k}diag(S)∈Kk×k. In this case, UUU and VVV also have orthonormal columns.

Supports input of float, double, cfloat and cdouble dtypes. Also supports
batches of matrices, and if `A` is a batch of matrices then the output has the
same batch dimensions.

The returned decomposition is a named tuple (U, S, Vh) which corresponds to
UUU, SSS, VHV^{\text{H}}VH above.

The singular values are returned in descending order.

The parameter `full_matrices` chooses between the full (default) and reduced
SVD.

The `driver` kwarg may be used in CUDA with a cuSOLVER backend to choose the
algorithm used to compute the SVD. The choice of a driver is a trade-off
between accuracy and speed.

  * If `A` is well-conditioned (its condition number is not too large), or you do not mind some precision loss.

    * For a general matrix: ‘gesvdj’ (Jacobi method)

    * If `A` is tall or wide (m >> n or m << n): ‘gesvda’ (Approximate method)

  * If `A` is not well-conditioned or precision is relevant: ‘gesvd’ (QR based)

By default (`driver`= None), we call ‘gesvdj’ and, if it fails, we fallback to
‘gesvd’.

Differences with numpy.linalg.svd:

  * Unlike numpy.linalg.svd, this function always returns a tuple of three tensors and it doesn’t support compute_uv argument. Please use `torch.linalg.svdvals()`, which computes only the singular values, instead of compute_uv=False.

Note

When `full_matrices`= True, the gradients with respect to U[…, :, min(m, n):]
and Vh[…, min(m, n):, :] will be ignored, as those vectors can be arbitrary
bases of the corresponding subspaces.

Warning

The returned tensors U and V are not unique, nor are they continuous with
respect to `A`. Due to this lack of uniqueness, different hardware and
software may compute different singular vectors.

This non-uniqueness is caused by the fact that multiplying any pair of
singular vectors uk,vku_k, v_kuk​,vk​ by -1 in the real case or by eiϕ,ϕ∈Re^{i
\phi}, \phi \in \mathbb{R}eiϕ,ϕ∈R in the complex case produces another two
valid singular vectors of the matrix. For this reason, the loss function shall
not depend on this eiϕe^{i \phi}eiϕ quantity, as it is not well-defined. This
is checked for complex inputs when computing the gradients of this function.
As such, when inputs are complex and are on a CUDA device, the computation of
the gradients of this function synchronizes that device with the CPU.

Warning

Gradients computed using U or Vh will only be finite when `A` does not have
repeated singular values. If `A` is rectangular, additionally, zero must also
not be one of its singular values. Furthermore, if the distance between any
two singular values is close to zero, the gradient will be numerically
unstable, as it depends on the singular values σi\sigma_iσi​ through the
computation of 1min⁡i≠jσi2−σj2\frac{1}{\min_{i \neq j} \sigma_i^2 -
\sigma_j^2}mini=j​σi2​−σj2​1​. In the rectangular case, the gradient will
also be numerically unstable when `A` has small singular values, as it also
depends on the computation of 1σi\frac{1}{\sigma_i}σi​1​.

See also

`torch.linalg.svdvals()` computes only the singular values. Unlike
`torch.linalg.svd()`, the gradients of `svdvals()` are always numerically
stable.

`torch.linalg.eig()` for a function that computes another type of spectral
decomposition of a matrix. The eigendecomposition works just on square
matrices.

`torch.linalg.eigh()` for a (faster) function that computes the eigenvalue
decomposition for Hermitian and symmetric matrices.

`torch.linalg.qr()` for another (much faster) decomposition that works on
general matrices.

Parameters

    

  * **A** ( _Tensor_) – tensor of shape (*, m, n) where * is zero or more batch dimensions.

  * **full_matrices** ( _bool_ _,_ _optional_ ) – controls whether to compute the full or reduced SVD, and consequently, the shape of the returned tensors U and Vh. Default: True.

Keyword Arguments

    

  * **driver** ( _str_ _,_ _optional_ ) – name of the cuSOLVER method to be used. This keyword argument only works on CUDA inputs. Available options are: None, gesvd, gesvdj, and gesvda. Default: None.

  * **out** ( _tuple_ _,_ _optional_ ) – output tuple of three tensors. Ignored if None.

Returns

    

A named tuple (U, S, Vh) which corresponds to UUU, SSS, VHV^{\text{H}}VH
above.

S will always be real-valued, even when `A` is complex. It will also be
ordered in descending order.

U and Vh will have the same dtype as `A`. The left / right singular vectors
will be given by the columns of U and the rows of Vh respectively.

Examples:

    
    
    >>> A = torch.randn(5, 3)
    >>> U, S, Vh = torch.linalg.svd(A, full_matrices=False)
    >>> U.shape, S.shape, Vh.shape
    (torch.Size([5, 3]), torch.Size([3]), torch.Size([3, 3]))
    >>> torch.dist(A, U @ torch.diag(S) @ Vh)
    tensor(1.0486e-06)
    
    >>> U, S, Vh = torch.linalg.svd(A)
    >>> U.shape, S.shape, Vh.shape
    (torch.Size([5, 5]), torch.Size([3]), torch.Size([3, 3]))
    >>> torch.dist(A, U[:, :3] @ torch.diag(S) @ Vh)
    tensor(1.0486e-06)
    
    >>> A = torch.randn(7, 5, 3)
    >>> U, S, Vh = torch.linalg.svd(A, full_matrices=False)
    >>> torch.dist(A, U @ torch.diag_embed(S) @ Vh)
    tensor(3.0957e-06)
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.linalg.svd
    * `svd()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

