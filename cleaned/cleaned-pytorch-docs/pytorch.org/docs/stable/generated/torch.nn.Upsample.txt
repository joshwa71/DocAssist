

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * Upsample
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# Upsample¶

_class _torch.nn.Upsample( _size =None_, _scale_factor =None_, _mode
='nearest'_, _align_corners =None_, _recompute_scale_factor =None_)[source]¶

    

Upsamples a given multi-channel 1D (temporal), 2D (spatial) or 3D (volumetric)
data.

The input data is assumed to be of the form minibatch x channels x [optional
depth] x [optional height] x width. Hence, for spatial inputs, we expect a 4D
Tensor and for volumetric inputs, we expect a 5D Tensor.

The algorithms available for upsampling are nearest neighbor and linear,
bilinear, bicubic and trilinear for 3D, 4D and 5D input Tensor, respectively.

One can either give a `scale_factor` or the target output `size` to calculate
the output size. (You cannot give both, as it is ambiguous)

Parameters

    

  * **size** ( _int_ _or_ _Tuple_ _[_ _int_ _] or_ _Tuple_ _[_ _int_ _,_ _int_ _] or_ _Tuple_ _[_ _int_ _,_ _int_ _,_ _int_ _]_ _,_ _optional_ ) – output spatial sizes

  * **scale_factor** ( _float_ _or_ _Tuple_ _[_ _float_ _] or_ _Tuple_ _[_ _float_ _,_ _float_ _] or_ _Tuple_ _[_ _float_ _,_ _float_ _,_ _float_ _]_ _,_ _optional_ ) – multiplier for spatial size. Has to match input size if it is a tuple.

  * **mode** ( _str_ _,_ _optional_ ) – the upsampling algorithm: one of `'nearest'`, `'linear'`, `'bilinear'`, `'bicubic'` and `'trilinear'`. Default: `'nearest'`

  * **align_corners** ( _bool_ _,_ _optional_ ) – if `True`, the corner pixels of the input and output tensors are aligned, and thus preserving the values at those pixels. This only has effect when `mode` is `'linear'`, `'bilinear'`, `'bicubic'`, or `'trilinear'`. Default: `False`

  * **recompute_scale_factor** ( _bool_ _,_ _optional_ ) – recompute the scale_factor for use in the interpolation calculation. If recompute_scale_factor is `True`, then scale_factor must be passed in and scale_factor is used to compute the output size. The computed output size will be used to infer new scales for the interpolation. Note that when scale_factor is floating-point, it may differ from the recomputed scale_factor due to rounding and precision issues. If recompute_scale_factor is `False`, then size or scale_factor will be used directly for interpolation.

Shape:

    

  * Input: (N,C,Win)(N, C, W_{in})(N,C,Win​), (N,C,Hin,Win)(N, C, H_{in}, W_{in})(N,C,Hin​,Win​) or (N,C,Din,Hin,Win)(N, C, D_{in}, H_{in}, W_{in})(N,C,Din​,Hin​,Win​)

  * Output: (N,C,Wout)(N, C, W_{out})(N,C,Wout​), (N,C,Hout,Wout)(N, C, H_{out}, W_{out})(N,C,Hout​,Wout​) or (N,C,Dout,Hout,Wout)(N, C, D_{out}, H_{out}, W_{out})(N,C,Dout​,Hout​,Wout​), where

Dout=⌊Din×scale_factor⌋D_{out} = \left\lfloor D_{in} \times
\text{scale\\_factor} \right\rfloor Dout​=⌊Din​×scale_factor⌋

Hout=⌊Hin×scale_factor⌋H_{out} = \left\lfloor H_{in} \times
\text{scale\\_factor} \right\rfloor Hout​=⌊Hin​×scale_factor⌋

Wout=⌊Win×scale_factor⌋W_{out} = \left\lfloor W_{in} \times
\text{scale\\_factor} \right\rfloor Wout​=⌊Win​×scale_factor⌋

Warning

With `align_corners = True`, the linearly interpolating modes (linear,
bilinear, bicubic, and trilinear) don’t proportionally align the output and
input pixels, and thus the output values can depend on the input size. This
was the default behavior for these modes up to version 0.3.1. Since then, the
default behavior is `align_corners = False`. See below for concrete examples
on how this affects the outputs.

Note

If you want downsampling/general resizing, you should use `interpolate()`.

Examples:

    
    
    >>> input = torch.arange(1, 5, dtype=torch.float32).view(1, 1, 2, 2)
    >>> input
    tensor([[[[1., 2.],
              [3., 4.]]]])
    
    >>> m = nn.Upsample(scale_factor=2, mode='nearest')
    >>> m(input)
    tensor([[[[1., 1., 2., 2.],
              [1., 1., 2., 2.],
              [3., 3., 4., 4.],
              [3., 3., 4., 4.]]]])
    
    >>> m = nn.Upsample(scale_factor=2, mode='bilinear')  # align_corners=False
    >>> m(input)
    tensor([[[[1.0000, 1.2500, 1.7500, 2.0000],
              [1.5000, 1.7500, 2.2500, 2.5000],
              [2.5000, 2.7500, 3.2500, 3.5000],
              [3.0000, 3.2500, 3.7500, 4.0000]]]])
    
    >>> m = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
    >>> m(input)
    tensor([[[[1.0000, 1.3333, 1.6667, 2.0000],
              [1.6667, 2.0000, 2.3333, 2.6667],
              [2.3333, 2.6667, 3.0000, 3.3333],
              [3.0000, 3.3333, 3.6667, 4.0000]]]])
    
    >>> # Try scaling the same data in a larger tensor
    >>> input_3x3 = torch.zeros(3, 3).view(1, 1, 3, 3)
    >>> input_3x3[:, :, :2, :2].copy_(input)
    tensor([[[[1., 2.],
              [3., 4.]]]])
    >>> input_3x3
    tensor([[[[1., 2., 0.],
              [3., 4., 0.],
              [0., 0., 0.]]]])
    
    >>> m = nn.Upsample(scale_factor=2, mode='bilinear')  # align_corners=False
    >>> # Notice that values in top left corner are the same with the small input (except at boundary)
    >>> m(input_3x3)
    tensor([[[[1.0000, 1.2500, 1.7500, 1.5000, 0.5000, 0.0000],
              [1.5000, 1.7500, 2.2500, 1.8750, 0.6250, 0.0000],
              [2.5000, 2.7500, 3.2500, 2.6250, 0.8750, 0.0000],
              [2.2500, 2.4375, 2.8125, 2.2500, 0.7500, 0.0000],
              [0.7500, 0.8125, 0.9375, 0.7500, 0.2500, 0.0000],
              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]]])
    
    >>> m = nn.Upsample(scale_factor=2, mode='bilinear', align_corners=True)
    >>> # Notice that values in top left corner are now changed
    >>> m(input_3x3)
    tensor([[[[1.0000, 1.4000, 1.8000, 1.6000, 0.8000, 0.0000],
              [1.8000, 2.2000, 2.6000, 2.2400, 1.1200, 0.0000],
              [2.6000, 3.0000, 3.4000, 2.8800, 1.4400, 0.0000],
              [2.4000, 2.7200, 3.0400, 2.5600, 1.2800, 0.0000],
              [1.2000, 1.3600, 1.5200, 1.2800, 0.6400, 0.0000],
              [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000]]]])
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * Upsample
    * `Upsample`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

