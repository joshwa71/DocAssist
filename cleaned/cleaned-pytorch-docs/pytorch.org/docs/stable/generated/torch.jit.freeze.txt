

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * TorchScript >
  * torch.jit.freeze
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.jit.freeze¶

torch.jit.freeze( _mod_ , _preserved_attrs =None_, _optimize_numerics
=True_)[source]¶

    

Freezing a `ScriptModule` will clone it and attempt to inline the cloned
module’s submodules, parameters, and attributes as constants in the
TorchScript IR Graph. By default, forward will be preserved, as well as
attributes & methods specified in preserved_attrs. Additionally, any attribute
that is modified within a preserved method will be preserved.

Freezing currently only accepts ScriptModules that are in eval mode.

Freezing applies generic optimization that will speed up your model regardless
of machine. To further optimize using server-specific settings, run
optimize_for_inference after freezing.

Parameters

    

  * **mod** (`ScriptModule`) – a module to be frozen

  * **preserved_attrs** ( _Optional_ _[_ _List_ _[_ _str_ _]_ _]_ ) – a list of attributes to preserve in addition to the forward method. Attributes modified in preserved methods will also be preserved.

  * **optimize_numerics** ( _bool_) – If `True`, a set of optimization passes will be run that does not strictly preserve numerics. Full details of optimization can be found at torch.jit.run_frozen_optimizations.

Returns

    

Frozen `ScriptModule`.

Example (Freezing a simple module with a Parameter):

    
    
        def forward(self, input):
            output = self.weight.mm(input)
            output = self.linear(output)
            return output
    
    scripted_module = torch.jit.script(MyModule(2, 3).eval())
    frozen_module = torch.jit.freeze(scripted_module)
    # parameters have been removed and inlined into the Graph as constants
    assert len(list(frozen_module.named_parameters())) == 0
    # See the compiled graph as Python code
    print(frozen_module.code)
    

Example (Freezing a module with preserved attributes)

    
    
        def forward(self, input):
            self.modified_tensor += 1
            return input + self.modified_tensor
    
    scripted_module = torch.jit.script(MyModule2().eval())
    frozen_module = torch.jit.freeze(scripted_module, preserved_attrs=["version"])
    # we've manually preserved `version`, so it still exists on the frozen module and can be modified
    assert frozen_module.version == 1
    frozen_module.version = 2
    # `modified_tensor` is detected as being mutated in the forward, so freezing preserves
    # it to retain model semantics
    assert frozen_module(torch.tensor(1)) == torch.tensor(12)
    # now that we've run it once, the next result will be incremented by one
    assert frozen_module(torch.tensor(1)) == torch.tensor(13)
    

Note

Freezing submodule attributes is also supported: frozen_module =
torch.jit.freeze(scripted_module, preserved_attrs=[“submodule.version”])

Note

If you’re not sure why an attribute is not being inlined as a constant, you
can run dump_alias_db on frozen_module.forward.graph to see if freezing has
detected the attribute is being modified.

Note

Because freezing makes weights constants and removes module hierarchy, to and
other nn.Module methods to manipulate device or dtype no longer work. As a
workaround, You can remap devices by specifying map_location in
torch.jit.load, however device-specific logic may have been baked into the
model.

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.jit.freeze
    * `freeze()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

