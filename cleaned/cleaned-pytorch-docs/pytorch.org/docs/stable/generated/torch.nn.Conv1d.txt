

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * Conv1d
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# Conv1d¶

_class _torch.nn.Conv1d( _in_channels_ , _out_channels_ , _kernel_size_ ,
_stride =1_, _padding =0_, _dilation =1_, _groups =1_, _bias =True_,
_padding_mode ='zeros'_, _device =None_, _dtype =None_)[source]¶

    

Applies a 1D convolution over an input signal composed of several input
planes.

In the simplest case, the output value of the layer with input size
(N,Cin,L)(N, C_{\text{in}}, L)(N,Cin​,L) and output (N,Cout,Lout)(N,
C_{\text{out}}, L_{\text{out}})(N,Cout​,Lout​) can be precisely described as:

out(Ni,Coutj)=bias(Coutj)+∑k=0Cin−1weight(Coutj,k)⋆input(Ni,k)\text{out}(N_i,
C_{\text{out}_j}) = \text{bias}(C_{\text{out}_j}) + \sum_{k = 0}^{C_{in} - 1}
\text{weight}(C_{\text{out}_j}, k) \star \text{input}(N_i, k)
out(Ni​,Coutj​​)=bias(Coutj​​)+k=0∑Cin​−1​weight(Coutj​​,k)⋆input(Ni​,k)

where ⋆\star⋆ is the valid cross-correlation operator, NNN is a batch size,
CCC denotes a number of channels, LLL is a length of signal sequence.

This module supports TensorFloat32.

On certain ROCm devices, when using float16 inputs this module will use
different precision for backward.

  * `stride` controls the stride for the cross-correlation, a single number or a one-element tuple.

  * `padding` controls the amount of padding applied to the input. It can be either a string {‘valid’, ‘same’} or a tuple of ints giving the amount of implicit padding applied on both sides.

  * `dilation` controls the spacing between the kernel points; also known as the à trous algorithm. It is harder to describe, but this link has a nice visualization of what `dilation` does.

  * `groups` controls the connections between inputs and outputs. `in_channels` and `out_channels` must both be divisible by `groups`. For example,

>     * At groups=1, all inputs are convolved to all outputs.
>
>     * At groups=2, the operation becomes equivalent to having two conv
> layers side by side, each seeing half the input channels and producing half
> the output channels, and both subsequently concatenated.
>
>     * At groups= `in_channels`, each input channel is convolved with its own
> set of filters (of size
> out_channelsin_channels\frac{\text{out\\_channels}}{\text{in\\_channels}}in_channelsout_channels​).

Note

When groups == in_channels and out_channels == K * in_channels, where K is a
positive integer, this operation is also known as a “depthwise convolution”.

In other words, for an input of size (N,Cin,Lin)(N, C_{in},
L_{in})(N,Cin​,Lin​), a depthwise convolution with a depthwise multiplier K
can be performed with the arguments
(Cin=Cin,Cout=Cin×K,...,groups=Cin)(C_\text{in}=C_\text{in},
C_\text{out}=C_\text{in} \times \text{K}, ...,
\text{groups}=C_\text{in})(Cin​=Cin​,Cout​=Cin​×K,...,groups=Cin​).

Note

In some circumstances when given tensors on a CUDA device and using CuDNN,
this operator may select a nondeterministic algorithm to increase performance.
If this is undesirable, you can try to make the operation deterministic
(potentially at a performance cost) by setting
`torch.backends.cudnn.deterministic = True`. See Reproducibility for more
information.

Note

`padding='valid'` is the same as no padding. `padding='same'` pads the input
so the output has the shape as the input. However, this mode doesn’t support
any stride values other than 1.

Note

This module supports complex data types i.e. `complex32, complex64,
complex128`.

Parameters

    

  * **in_channels** ( _int_) – Number of channels in the input image

  * **out_channels** ( _int_) – Number of channels produced by the convolution

  * **kernel_size** ( _int_ _or_ _tuple_) – Size of the convolving kernel

  * **stride** ( _int_ _or_ _tuple_ _,_ _optional_ ) – Stride of the convolution. Default: 1

  * **padding** ( _int_ _,_ _tuple_ _or_ _str_ _,_ _optional_ ) – Padding added to both sides of the input. Default: 0

  * **padding_mode** ( _str_ _,_ _optional_ ) – `'zeros'`, `'reflect'`, `'replicate'` or `'circular'`. Default: `'zeros'`

  * **dilation** ( _int_ _or_ _tuple_ _,_ _optional_ ) – Spacing between kernel elements. Default: 1

  * **groups** ( _int_ _,_ _optional_ ) – Number of blocked connections from input channels to output channels. Default: 1

  * **bias** ( _bool_ _,_ _optional_ ) – If `True`, adds a learnable bias to the output. Default: `True`

Shape:

    

  * Input: (N,Cin,Lin)(N, C_{in}, L_{in})(N,Cin​,Lin​) or (Cin,Lin)(C_{in}, L_{in})(Cin​,Lin​)

  * Output: (N,Cout,Lout)(N, C_{out}, L_{out})(N,Cout​,Lout​) or (Cout,Lout)(C_{out}, L_{out})(Cout​,Lout​), where

Lout=⌊Lin+2×padding−dilation×(kernel_size−1)−1stride+1⌋L_{out} =
\left\lfloor\frac{L_{in} + 2 \times \text{padding} - \text{dilation} \times
(\text{kernel\\_size} - 1) - 1}{\text{stride}} + 1\right\rfloor
Lout​=⌊strideLin​+2×padding−dilation×(kernel_size−1)−1​+1⌋

Variables

    

  * **weight** ( _Tensor_) – the learnable weights of the module of shape (out_channels,in_channelsgroups,kernel_size)(\text{out\\_channels}, \frac{\text{in\\_channels}}{\text{groups}}, \text{kernel\\_size})(out_channels,groupsin_channels​,kernel_size). The values of these weights are sampled from U(−k,k)\mathcal{U}(-\sqrt{k}, \sqrt{k})U(−k​,k​) where k=groupsCin∗kernel_sizek = \frac{groups}{C_\text{in} * \text{kernel\\_size}}k=Cin​∗kernel_sizegroups​

  * **bias** ( _Tensor_) – the learnable bias of the module of shape (out_channels). If `bias` is `True`, then the values of these weights are sampled from U(−k,k)\mathcal{U}(-\sqrt{k}, \sqrt{k})U(−k​,k​) where k=groupsCin∗kernel_sizek = \frac{groups}{C_\text{in} * \text{kernel\\_size}}k=Cin​∗kernel_sizegroups​

Examples:

    
    
    >>> m = nn.Conv1d(16, 33, 3, stride=2)
    >>> input = torch.randn(20, 16, 50)
    >>> output = m(input)
    

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * Conv1d
    * `Conv1d`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

