

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.func >
  * torch.func API Reference >
  * torch.func.grad
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.func.grad¶

torch.func.grad( _func_ , _argnums =0_, _has_aux =False_)¶

    

`grad` operator helps computing gradients of `func` with respect to the
input(s) specified by `argnums`. This operator can be nested to compute
higher-order gradients.

Parameters

    

  * **func** ( _Callable_ ) – A Python function that takes one or more arguments. Must return a single-element Tensor. If specified `has_aux` equals `True`, function can return a tuple of single-element Tensor and other auxiliary objects: `(output, aux)`.

  * **argnums** ( _int_ _or_ _Tuple_ _[_ _int_ _]_ ) – Specifies arguments to compute gradients with respect to. `argnums` can be single integer or tuple of integers. Default: 0.

  * **has_aux** ( _bool_) – Flag indicating that `func` returns a tensor and other auxiliary objects: `(output, aux)`. Default: False.

Returns

    

Function to compute gradients with respect to its inputs. By default, the
output of the function is the gradient tensor(s) with respect to the first
argument. If specified `has_aux` equals `True`, tuple of gradients and output
auxiliary objects is returned. If `argnums` is a tuple of integers, a tuple of
output gradients with respect to each `argnums` value is returned.

Return type

    

_Callable_

Example of using `grad`:

    
    
    >>> from torch.func import grad
    >>> x = torch.randn([])
    >>> cos_x = grad(lambda x: torch.sin(x))(x)
    >>> assert torch.allclose(cos_x, x.cos())
    >>>
    >>> # Second-order gradients
    >>> neg_sin_x = grad(grad(lambda x: torch.sin(x)))(x)
    >>> assert torch.allclose(neg_sin_x, -x.sin())
    

When composed with `vmap`, `grad` can be used to compute per-sample-gradients:

    
    
    >>> from torch.func import grad, vmap
    >>> batch_size, feature_size = 3, 5
    >>>
    >>> def model(weights, feature_vec):
    >>>     # Very simple linear model with activation
    >>>     assert feature_vec.dim() == 1
    >>>     return feature_vec.dot(weights).relu()
    >>>
    >>> def compute_loss(weights, example, target):
    >>>     y = model(weights, example)
    >>>     return ((y - target) ** 2).mean()  # MSELoss
    >>>
    >>> weights = torch.randn(feature_size, requires_grad=True)
    >>> examples = torch.randn(batch_size, feature_size)
    >>> targets = torch.randn(batch_size)
    >>> inputs = (weights, examples, targets)
    >>> grad_weight_per_example = vmap(grad(compute_loss), in_dims=(None, 0, 0))(*inputs)
    

Example of using `grad` with `has_aux` and `argnums`:

    
    
    >>> from torch.func import grad
    >>> def my_loss_func(y, y_pred):
    >>>    loss_per_sample = (0.5 * y_pred - y) ** 2
    >>>    loss = loss_per_sample.mean()
    >>>    return loss, (y_pred, loss_per_sample)
    >>>
    >>> fn = grad(my_loss_func, argnums=(0, 1), has_aux=True)
    >>> y_true = torch.rand(4)
    >>> y_preds = torch.rand(4, requires_grad=True)
    >>> out = fn(y_true, y_preds)
    >>> # > output is ((grads w.r.t y_true, grads w.r.t y_preds), (y_pred, loss_per_sample))
    

Note

Using PyTorch `torch.no_grad` together with `grad`.

Case 1: Using `torch.no_grad` inside a function:

    
    
    >>> def f(x):
    >>>     with torch.no_grad():
    >>>         c = x ** 2
    >>>     return x - c
    

In this case, `grad(f)(x)` will respect the inner `torch.no_grad`.

Case 2: Using `grad` inside `torch.no_grad` context manager:

    
    
    >>> with torch.no_grad():
    >>>     grad(f)(x)
    

In this case, `grad` will respect the inner `torch.no_grad`, but not the outer
one. This is because `grad` is a “function transform”: its result should not
depend on the result of a context manager outside of `f`.

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.func.grad
    * `grad()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

