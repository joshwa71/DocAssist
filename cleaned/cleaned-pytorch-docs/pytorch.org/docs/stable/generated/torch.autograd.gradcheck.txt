

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * Automatic differentiation package - torch.autograd >
  * torch.autograd.gradcheck
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# torch.autograd.gradcheck¶

torch.autograd.gradcheck( _func_ , _inputs_ , _*_ , _eps =1e-06_, _atol
=1e-05_, _rtol =0.001_, _raise_exception =True_, _check_sparse_nnz =None_,
_nondet_tol =0.0_, _check_undefined_grad =True_, _check_grad_dtypes =False_,
_check_batched_grad =False_, _check_batched_forward_grad =False_,
_check_forward_ad =False_, _check_backward_ad =True_, _fast_mode =False_,
_masked =None_)[source]¶

    

Check gradients computed via small finite differences against analytical
gradients wrt tensors in `inputs` that are of floating point or complex type
and with `requires_grad=True`.

The check between numerical and analytical gradients uses `allclose()`.

For most of the complex functions we consider for optimization purposes, no
notion of Jacobian exists. Instead, gradcheck verifies if the numerical and
analytical values of the Wirtinger and Conjugate Wirtinger derivatives are
consistent. Because the gradient computation is done under the assumption that
the overall function has a real-valued output, we treat functions with complex
output in a special way. For these functions, gradcheck is applied to two
real-valued functions corresponding to taking the real components of the
complex outputs for the first, and taking the imaginary components of the
complex outputs for the second. For more details, check out Autograd for
Complex Numbers.

Note

The default values are designed for `input` of double precision. This check
will likely fail if `input` is of less precision, e.g., `FloatTensor`.

Note

Gradcheck may fail when evaluated on non-differentiable points because the
numerically computed gradients via finite differencing may differ those
computed analytically (not necessarily because either is incorrect). For more
context, see Gradients for non-differentiable functions.

Warning

If any checked tensor in `input` has overlapping memory, i.e., different
indices pointing to the same memory address (e.g., from `torch.expand()`),
this check will likely fail because the numerical gradients computed by point
perturbation at such indices will change values at all other indices that
share the same memory address.

Parameters

    

  * **func** ( _function_ ) – a Python function that takes Tensor inputs and returns a Tensor or a tuple of Tensors

  * **inputs** ( _tuple_ _of_ _Tensor_ _or_ _Tensor_) – inputs to the function

  * **eps** ( _float_ _,_ _optional_ ) – perturbation for finite differences

  * **atol** ( _float_ _,_ _optional_ ) – absolute tolerance

  * **rtol** ( _float_ _,_ _optional_ ) – relative tolerance

  * **raise_exception** ( _bool_ _,_ _optional_ ) – indicating whether to raise an exception if the check fails. The exception gives more information about the exact nature of the failure. This is helpful when debugging gradchecks.

  * **check_sparse_nnz** ( _bool_ _,_ _optional_ ) – if `True`, gradcheck allows for SparseTensor input, and for any SparseTensor inputs, gradcheck will perform its check at `nnz` positions only. The `check_sparse_nnz` argument is deprecated, use the `masked` argument instead. If `check_sparse_nnz != masked`, an exception is raised.

  * **nondet_tol** ( _float_ _,_ _optional_ ) – tolerance for non-determinism. When running identical inputs through the differentiation, the results must either match exactly (default, 0.0) or be within this tolerance.

  * **check_undefined_grad** ( _bool_ _,_ _optional_ ) – if `True`, check if undefined output grads are supported and treated as zeros, for `Tensor` outputs.

  * **check_batched_grad** ( _bool_ _,_ _optional_ ) – if `True`, check if we can compute batched gradients using prototype vmap support. Defaults to False.

  * **check_batched_forward_grad** ( _bool_ _,_ _optional_ ) – if `True`, checks if we can compute batched forward gradients using forward ad and prototype vmap support. Defaults to `False`.

  * **check_forward_ad** ( _bool_ _,_ _optional_ ) – if `True`, check that the gradients computed with forward mode AD match the numerical ones. Defaults to `False`.

  * **check_backward_ad** ( _bool_ _,_ _optional_ ) – if `False`, do not perform any checks that rely on backward mode AD to be implemented. Defaults to `True`.

  * **fast_mode** ( _bool_ _,_ _optional_ ) – Fast mode for gradcheck and gradgradcheck is currently only implemented for R to R functions. If none of the inputs and outputs are complex a faster implementation of gradcheck that no longer computes the entire jacobian is run; otherwise, we fall back to the slow implementation.

  * **masked** ( _bool_ _,_ _optional_ ) – if `True`, the gradients of unspecified elements of sparse tensors are ignored. Defaults to `False`.

Returns

    

`True` if all differences satisfy allclose condition

Return type

    

bool

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * torch.autograd.gradcheck
    * `gradcheck()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

