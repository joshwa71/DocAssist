

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 

PyTorch

torchaudio

torchtext

torchvision

torcharrow

TorchData

TorchRec

TorchServe

TorchX

PyTorch on XLA Devices

  * Resources 

About

Learn about PyTorch’s features and capabilities

PyTorch Foundation

Learn about the PyTorch foundation

Community

Join the PyTorch developer community to contribute, learn, and get your
questions answered.

Community Stories

Learn how our community solves real, everyday machine learning problems with
PyTorch.

Developer Resources

Find resources and get questions answered

Events

Find events, webinars, and podcasts

Forums

A place to discuss PyTorch code, issues, install, research

Models (Beta)

Discover, publish, and reuse pre-trained models

  * GitHub

Table of Contents

2.1 ▼

Community

  * PyTorch Governance | Build + CI
  * PyTorch Contribution Guide
  * PyTorch Design Philosophy
  * PyTorch Governance | Mechanics
  * PyTorch Governance | Maintainers

Developer Notes

  * CUDA Automatic Mixed Precision examples
  * Autograd mechanics
  * Broadcasting semantics
  * CPU threading and TorchScript inference
  * CUDA semantics
  * Distributed Data Parallel
  * Extending PyTorch
  * Extending torch.func with autograd.Function
  * Frequently Asked Questions
  * Gradcheck mechanics
  * HIP (ROCm) semantics
  * Features for large-scale deployments
  * Modules
  * MPS backend
  * Multiprocessing best practices
  * Numerical accuracy
  * Reproducibility
  * Serialization semantics
  * Windows FAQ

Language Bindings

  * C++
  * Javadoc
  * torch::deploy

Python API

  * torch
  * torch.nn
  * torch.nn.functional
  * torch.Tensor
  * Tensor Attributes
  * Tensor Views
  * torch.amp
  * torch.autograd
  * torch.library
  * torch.cpu
  * torch.cuda
  * Understanding CUDA Memory Usage
  * Generating a Snapshot
  * Using the visualizer
  * Snapshot API Reference
  * torch.mps
  * torch.backends
  * torch.export
  * torch.distributed
  * torch.distributed.algorithms.join
  * torch.distributed.elastic
  * torch.distributed.fsdp
  * torch.distributed.optim
  * torch.distributed.tensor.parallel
  * torch.distributed.checkpoint
  * torch.distributions
  * torch.compiler
  * torch.fft
  * torch.func
  * torch.futures
  * torch.fx
  * torch.hub
  * torch.jit
  * torch.linalg
  * torch.monitor
  * torch.signal
  * torch.special
  * torch.overrides
  * torch.package
  * torch.profiler
  * torch.nn.init
  * torch.onnx
  * torch.optim
  * Complex Numbers
  * DDP Communication Hooks
  * Pipeline Parallelism
  * Quantization
  * Distributed RPC Framework
  * torch.random
  * torch.masked
  * torch.nested
  * torch.sparse
  * torch.Storage
  * torch.testing
  * torch.utils
  * torch.utils.benchmark
  * torch.utils.bottleneck
  * torch.utils.checkpoint
  * torch.utils.cpp_extension
  * torch.utils.data
  * torch.utils.jit
  * torch.utils.dlpack
  * torch.utils.mobile_optimizer
  * torch.utils.model_zoo
  * torch.utils.tensorboard
  * Type Info
  * Named Tensors
  * Named Tensors operator coverage
  * torch.__config__
  * torch._logging

Libraries

  * torchaudio
  * TorchData
  * TorchRec
  * TorchServe
  * torchtext
  * torchvision
  * PyTorch on XLA Devices

  * Docs  >
  * torch.nn >
  * Module
  * ![](../_static/images/view-page-source-icon.svg)

Shortcuts

# Module¶

_class _torch.nn.Module( _* args_, _** kwargs_)[source]¶

    

Base class for all neural network modules.

Your models should also subclass this class.

Modules can also contain other Modules, allowing to nest them in a tree
structure. You can assign the submodules as regular attributes:

    
    
    import torch.nn as nn
    import torch.nn.functional as F
    
    class Model(nn.Module):
        def __init__(self):
            super().__init__()
            self.conv1 = nn.Conv2d(1, 20, 5)
            self.conv2 = nn.Conv2d(20, 20, 5)
    
        def forward(self, x):
            x = F.relu(self.conv1(x))
            return F.relu(self.conv2(x))
    

Submodules assigned in this way will be registered, and will have their
parameters converted too when you call `to()`, etc.

Note

As per the example above, an `__init__()` call to the parent class must be
made before assignment on the child.

Variables

    

**training** ( _bool_) – Boolean represents whether this module is in training
or evaluation mode.

add_module( _name_ , _module_ )[source]¶

    

Adds a child module to the current module.

The module can be accessed as an attribute using the given name.

Parameters

    

  * **name** ( _str_) – name of the child module. The child module can be accessed from this module using the given name

  * **module** ( _Module_) – child module to be added to the module.

apply( _fn_ )[source]¶

    

Applies `fn` recursively to every submodule (as returned by `.children()`) as
well as self. Typical use includes initializing the parameters of a model (see
also torch.nn.init).

Parameters

    

**fn** (`Module` -> None) – function to be applied to each submodule

Returns

    

self

Return type

    

Module

Example:

    
    
    >>> @torch.no_grad()
    >>> def init_weights(m):
    >>>     print(m)
    >>>     if type(m) == nn.Linear:
    >>>         m.weight.fill_(1.0)
    >>>         print(m.weight)
    >>> net = nn.Sequential(nn.Linear(2, 2), nn.Linear(2, 2))
    >>> net.apply(init_weights)
    Linear(in_features=2, out_features=2, bias=True)
    Parameter containing:
    tensor([[1., 1.],
            [1., 1.]], requires_grad=True)
    Linear(in_features=2, out_features=2, bias=True)
    Parameter containing:
    tensor([[1., 1.],
            [1., 1.]], requires_grad=True)
    Sequential(
      (0): Linear(in_features=2, out_features=2, bias=True)
      (1): Linear(in_features=2, out_features=2, bias=True)
    )
    

bfloat16()[source]¶

    

Casts all floating point parameters and buffers to `bfloat16` datatype.

Note

This method modifies the module in-place.

Returns

    

self

Return type

    

Module

buffers( _recurse =True_)[source]¶

    

Returns an iterator over module buffers.

Parameters

    

**recurse** ( _bool_) – if True, then yields buffers of this module and all
submodules. Otherwise, yields only buffers that are direct members of this
module.

Yields

    

_torch.Tensor_ – module buffer

Return type

    

_Iterator_[ _Tensor_]

Example:

    
    
    >>> for buf in model.buffers():
    >>>     print(type(buf), buf.size())
    <class 'torch.Tensor'> (20L,)
    <class 'torch.Tensor'> (20L, 1L, 5L, 5L)
    

children()[source]¶

    

Returns an iterator over immediate children modules.

Yields

    

_Module_ – a child module

Return type

    

_Iterator_[ _Module_]

compile( _* args_, _** kwargs_)[source]¶

    

Compile this Module’s forward using `torch.compile()`.

This Module’s __call__ method is compiled and all arguments are passed as-is
to `torch.compile()`.

See `torch.compile()` for details on the arguments for this function.

cpu()[source]¶

    

Moves all model parameters and buffers to the CPU.

Note

This method modifies the module in-place.

Returns

    

self

Return type

    

Module

cuda( _device =None_)[source]¶

    

Moves all model parameters and buffers to the GPU.

This also makes associated parameters and buffers different objects. So it
should be called before constructing optimizer if the module will live on GPU
while being optimized.

Note

This method modifies the module in-place.

Parameters

    

**device** ( _int_ _,_ _optional_ ) – if specified, all parameters will be
copied to that device

Returns

    

self

Return type

    

Module

double()[source]¶

    

Casts all floating point parameters and buffers to `double` datatype.

Note

This method modifies the module in-place.

Returns

    

self

Return type

    

Module

eval()[source]¶

    

Sets the module in evaluation mode.

This has any effect only on certain modules. See documentations of particular
modules for details of their behaviors in training/evaluation mode, if they
are affected, e.g. `Dropout`, `BatchNorm`, etc.

This is equivalent with `self.train(False)`.

See Locally disabling gradient computation for a comparison between .eval()
and several similar mechanisms that may be confused with it.

Returns

    

self

Return type

    

Module

extra_repr()[source]¶

    

Set the extra representation of the module

To print customized extra information, you should re-implement this method in
your own modules. Both single-line and multi-line strings are acceptable.

Return type

    

str

float()[source]¶

    

Casts all floating point parameters and buffers to `float` datatype.

Note

This method modifies the module in-place.

Returns

    

self

Return type

    

Module

forward( _* input_)¶

    

Defines the computation performed at every call.

Should be overridden by all subclasses.

Note

Although the recipe for forward pass needs to be defined within this function,
one should call the `Module` instance afterwards instead of this since the
former takes care of running the registered hooks while the latter silently
ignores them.

get_buffer( _target_ )[source]¶

    

Returns the buffer given by `target` if it exists, otherwise throws an error.

See the docstring for `get_submodule` for a more detailed explanation of this
method’s functionality as well as how to correctly specify `target`.

Parameters

    

**target** ( _str_) – The fully-qualified string name of the buffer to look
for. (See `get_submodule` for how to specify a fully-qualified string.)

Returns

    

The buffer referenced by `target`

Return type

    

torch.Tensor

Raises

    

**AttributeError** – If the target string references an invalid path or
resolves to something that is not a buffer

get_extra_state()[source]¶

    

Returns any extra state to include in the module’s state_dict. Implement this
and a corresponding `set_extra_state()` for your module if you need to store
extra state. This function is called when building the module’s state_dict().

Note that extra state should be picklable to ensure working serialization of
the state_dict. We only provide provide backwards compatibility guarantees for
serializing Tensors; other objects may break backwards compatibility if their
serialized pickled form changes.

Returns

    

Any extra state to store in the module’s state_dict

Return type

    

object

get_parameter( _target_ )[source]¶

    

Returns the parameter given by `target` if it exists, otherwise throws an
error.

See the docstring for `get_submodule` for a more detailed explanation of this
method’s functionality as well as how to correctly specify `target`.

Parameters

    

**target** ( _str_) – The fully-qualified string name of the Parameter to look
for. (See `get_submodule` for how to specify a fully-qualified string.)

Returns

    

The Parameter referenced by `target`

Return type

    

torch.nn.Parameter

Raises

    

**AttributeError** – If the target string references an invalid path or
resolves to something that is not an `nn.Parameter`

get_submodule( _target_ )[source]¶

    

Returns the submodule given by `target` if it exists, otherwise throws an
error.

For example, let’s say you have an `nn.Module` `A` that looks like this:

    
    
    A(
        (net_b): Module(
            (net_c): Module(
                (conv): Conv2d(16, 33, kernel_size=(3, 3), stride=(2, 2))
            )
            (linear): Linear(in_features=100, out_features=200, bias=True)
        )
    )
    

(The diagram shows an `nn.Module` `A`. `A` has a nested submodule `net_b`,
which itself has two submodules `net_c` and `linear`. `net_c` then has a
submodule `conv`.)

To check whether or not we have the `linear` submodule, we would call
`get_submodule("net_b.linear")`. To check whether we have the `conv`
submodule, we would call `get_submodule("net_b.net_c.conv")`.

The runtime of `get_submodule` is bounded by the degree of module nesting in
`target`. A query against `named_modules` achieves the same result, but it is
O(N) in the number of transitive modules. So, for a simple check to see if
some submodule exists, `get_submodule` should always be used.

Parameters

    

**target** ( _str_) – The fully-qualified string name of the submodule to look
for. (See above example for how to specify a fully-qualified string.)

Returns

    

The submodule referenced by `target`

Return type

    

torch.nn.Module

Raises

    

**AttributeError** – If the target string references an invalid path or
resolves to something that is not an `nn.Module`

half()[source]¶

    

Casts all floating point parameters and buffers to `half` datatype.

Note

This method modifies the module in-place.

Returns

    

self

Return type

    

Module

ipu( _device =None_)[source]¶

    

Moves all model parameters and buffers to the IPU.

This also makes associated parameters and buffers different objects. So it
should be called before constructing optimizer if the module will live on IPU
while being optimized.

Note

This method modifies the module in-place.

Parameters

    

**device** ( _int_ _,_ _optional_ ) – if specified, all parameters will be
copied to that device

Returns

    

self

Return type

    

Module

load_state_dict( _state_dict_ , _strict =True_, _assign =False_)[source]¶

    

Copies parameters and buffers from `state_dict` into this module and its
descendants. If `strict` is `True`, then the keys of `state_dict` must exactly
match the keys returned by this module’s `state_dict()` function.

Warning

If `assign` is `True` the optimizer must be created after the call to
`load_state_dict`.

Parameters

    

  * **state_dict** ( _dict_) – a dict containing parameters and persistent buffers.

  * **strict** ( _bool_ _,_ _optional_ ) – whether to strictly enforce that the keys in `state_dict` match the keys returned by this module’s `state_dict()` function. Default: `True`

  * **assign** ( _bool_ _,_ _optional_ ) – whether to assign items in the state dictionary to their corresponding keys in the module instead of copying them inplace into the module’s current parameters and buffers. When `False`, the properties of the tensors in the current module are preserved while when `True`, the properties of the Tensors in the state dict are preserved. Default: `False`

Returns

    

  * **missing_keys** is a list of str containing the missing keys

  * **unexpected_keys** is a list of str containing the unexpected keys

Return type

    

`NamedTuple` with `missing_keys` and `unexpected_keys` fields

Note

If a parameter or buffer is registered as `None` and its corresponding key
exists in `state_dict`, `load_state_dict()` will raise a `RuntimeError`.

modules()[source]¶

    

Returns an iterator over all modules in the network.

Yields

    

_Module_ – a module in the network

Return type

    

_Iterator_[ _Module_]

Note

Duplicate modules are returned only once. In the following example, `l` will
be returned only once.

Example:

    
    
    >>> l = nn.Linear(2, 2)
    >>> net = nn.Sequential(l, l)
    >>> for idx, m in enumerate(net.modules()):
    ...     print(idx, '->', m)
    
    0 -> Sequential(
      (0): Linear(in_features=2, out_features=2, bias=True)
      (1): Linear(in_features=2, out_features=2, bias=True)
    )
    1 -> Linear(in_features=2, out_features=2, bias=True)
    

named_buffers( _prefix =''_, _recurse =True_, _remove_duplicate
=True_)[source]¶

    

Returns an iterator over module buffers, yielding both the name of the buffer
as well as the buffer itself.

Parameters

    

  * **prefix** ( _str_) – prefix to prepend to all buffer names.

  * **recurse** ( _bool_ _,_ _optional_ ) – if True, then yields buffers of this module and all submodules. Otherwise, yields only buffers that are direct members of this module. Defaults to True.

  * **remove_duplicate** ( _bool_ _,_ _optional_ ) – whether to remove the duplicated buffers in the result. Defaults to True.

Yields

    

_(str, torch.Tensor)_ – Tuple containing the name and buffer

Return type

    

_Iterator_[ _Tuple_[str, _Tensor_]]

Example:

    
    
    >>> for name, buf in self.named_buffers():
    >>>     if name in ['running_var']:
    >>>         print(buf.size())
    

named_children()[source]¶

    

Returns an iterator over immediate children modules, yielding both the name of
the module as well as the module itself.

Yields

    

_(str, Module)_ – Tuple containing a name and child module

Return type

    

_Iterator_[ _Tuple_[str, _Module_]]

Example:

    
    
    >>> for name, module in model.named_children():
    >>>     if name in ['conv4', 'conv5']:
    >>>         print(module)
    

named_modules( _memo =None_, _prefix =''_, _remove_duplicate =True_)[source]¶

    

Returns an iterator over all modules in the network, yielding both the name of
the module as well as the module itself.

Parameters

    

  * **memo** ( _Optional_ _[_ _Set_ _[_ _Module_ _]_ _]_ ) – a memo to store the set of modules already added to the result

  * **prefix** ( _str_) – a prefix that will be added to the name of the module

  * **remove_duplicate** ( _bool_) – whether to remove the duplicated module instances in the result or not

Yields

    

_(str, Module)_ – Tuple of name and module

Note

Duplicate modules are returned only once. In the following example, `l` will
be returned only once.

Example:

    
    
    >>> l = nn.Linear(2, 2)
    >>> net = nn.Sequential(l, l)
    >>> for idx, m in enumerate(net.named_modules()):
    ...     print(idx, '->', m)
    
    0 -> ('', Sequential(
      (0): Linear(in_features=2, out_features=2, bias=True)
      (1): Linear(in_features=2, out_features=2, bias=True)
    ))
    1 -> ('0', Linear(in_features=2, out_features=2, bias=True))
    

named_parameters( _prefix =''_, _recurse =True_, _remove_duplicate
=True_)[source]¶

    

Returns an iterator over module parameters, yielding both the name of the
parameter as well as the parameter itself.

Parameters

    

  * **prefix** ( _str_) – prefix to prepend to all parameter names.

  * **recurse** ( _bool_) – if True, then yields parameters of this module and all submodules. Otherwise, yields only parameters that are direct members of this module.

  * **remove_duplicate** ( _bool_ _,_ _optional_ ) – whether to remove the duplicated parameters in the result. Defaults to True.

Yields

    

_(str, Parameter)_ – Tuple containing the name and parameter

Return type

    

_Iterator_[ _Tuple_[str, _Parameter_]]

Example:

    
    
    >>> for name, param in self.named_parameters():
    >>>     if name in ['bias']:
    >>>         print(param.size())
    

parameters( _recurse =True_)[source]¶

    

Returns an iterator over module parameters.

This is typically passed to an optimizer.

Parameters

    

**recurse** ( _bool_) – if True, then yields parameters of this module and all
submodules. Otherwise, yields only parameters that are direct members of this
module.

Yields

    

_Parameter_ – module parameter

Return type

    

_Iterator_[ _Parameter_]

Example:

    
    
    >>> for param in model.parameters():
    >>>     print(type(param), param.size())
    <class 'torch.Tensor'> (20L,)
    <class 'torch.Tensor'> (20L, 1L, 5L, 5L)
    

register_backward_hook( _hook_ )[source]¶

    

Registers a backward hook on the module.

This function is deprecated in favor of `register_full_backward_hook()` and
the behavior of this function will change in future versions.

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

register_buffer( _name_ , _tensor_ , _persistent =True_)[source]¶

    

Adds a buffer to the module.

This is typically used to register a buffer that should not to be considered a
model parameter. For example, BatchNorm’s `running_mean` is not a parameter,
but is part of the module’s state. Buffers, by default, are persistent and
will be saved alongside parameters. This behavior can be changed by setting
`persistent` to `False`. The only difference between a persistent buffer and a
non-persistent buffer is that the latter will not be a part of this module’s
`state_dict`.

Buffers can be accessed as attributes using given names.

Parameters

    

  * **name** ( _str_) – name of the buffer. The buffer can be accessed from this module using the given name

  * **tensor** ( _Tensor_ _or_ _None_ ) – buffer to be registered. If `None`, then operations that run on buffers, such as `cuda`, are ignored. If `None`, the buffer is **not** included in the module’s `state_dict`.

  * **persistent** ( _bool_) – whether the buffer is part of this module’s `state_dict`.

Example:

    
    
    >>> self.register_buffer('running_mean', torch.zeros(num_features))
    

register_forward_hook( _hook_ , _*_ , _prepend =False_, _with_kwargs =False_,
_always_call =False_)[source]¶

    

Registers a forward hook on the module.

The hook will be called every time after `forward()` has computed an output.

If `with_kwargs` is `False` or not specified, the input contains only the
positional arguments given to the module. Keyword arguments won’t be passed to
the hooks and only to the `forward`. The hook can modify the output. It can
modify the input inplace but it will not have effect on forward since this is
called after `forward()` is called. The hook should have the following
signature:

    
    
    hook(module, args, output) -> None or modified output
    

If `with_kwargs` is `True`, the forward hook will be passed the `kwargs` given
to the forward function and be expected to return the output possibly
modified. The hook should have the following signature:

    
    
    hook(module, args, kwargs, output) -> None or modified output
    

Parameters

    

  * **hook** ( _Callable_ ) – The user defined hook to be registered.

  * **prepend** ( _bool_) – If `True`, the provided `hook` will be fired before all existing `forward` hooks on this `torch.nn.modules.Module`. Otherwise, the provided `hook` will be fired after all existing `forward` hooks on this `torch.nn.modules.Module`. Note that global `forward` hooks registered with `register_module_forward_hook()` will fire before all hooks registered by this method. Default: `False`

  * **with_kwargs** ( _bool_) – If `True`, the `hook` will be passed the kwargs given to the forward function. Default: `False`

  * **always_call** ( _bool_) – If `True` the `hook` will be run regardless of whether an exception is raised while calling the Module. Default: `False`

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

register_forward_pre_hook( _hook_ , _*_ , _prepend =False_, _with_kwargs
=False_)[source]¶

    

Registers a forward pre-hook on the module.

The hook will be called every time before `forward()` is invoked.

If `with_kwargs` is false or not specified, the input contains only the
positional arguments given to the module. Keyword arguments won’t be passed to
the hooks and only to the `forward`. The hook can modify the input. User can
either return a tuple or a single modified value in the hook. We will wrap the
value into a tuple if a single value is returned (unless that value is already
a tuple). The hook should have the following signature:

    
    
    hook(module, args) -> None or modified input
    

If `with_kwargs` is true, the forward pre-hook will be passed the kwargs given
to the forward function. And if the hook modifies the input, both the args and
kwargs should be returned. The hook should have the following signature:

    
    
    hook(module, args, kwargs) -> None or a tuple of modified input and kwargs
    

Parameters

    

  * **hook** ( _Callable_ ) – The user defined hook to be registered.

  * **prepend** ( _bool_) – If true, the provided `hook` will be fired before all existing `forward_pre` hooks on this `torch.nn.modules.Module`. Otherwise, the provided `hook` will be fired after all existing `forward_pre` hooks on this `torch.nn.modules.Module`. Note that global `forward_pre` hooks registered with `register_module_forward_pre_hook()` will fire before all hooks registered by this method. Default: `False`

  * **with_kwargs** ( _bool_) – If true, the `hook` will be passed the kwargs given to the forward function. Default: `False`

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

register_full_backward_hook( _hook_ , _prepend =False_)[source]¶

    

Registers a backward hook on the module.

The hook will be called every time the gradients with respect to a module are
computed, i.e. the hook will execute if and only if the gradients with respect
to module outputs are computed. The hook should have the following signature:

    
    
    hook(module, grad_input, grad_output) -> tuple(Tensor) or None
    

The `grad_input` and `grad_output` are tuples that contain the gradients with
respect to the inputs and outputs respectively. The hook should not modify its
arguments, but it can optionally return a new gradient with respect to the
input that will be used in place of `grad_input` in subsequent computations.
`grad_input` will only correspond to the inputs given as positional arguments
and all kwarg arguments are ignored. Entries in `grad_input` and `grad_output`
will be `None` for all non-Tensor arguments.

For technical reasons, when this hook is applied to a Module, its forward
function will receive a view of each Tensor passed to the Module. Similarly
the caller will receive a view of each Tensor returned by the Module’s forward
function.

Warning

Modifying inputs or outputs inplace is not allowed when using backward hooks
and will raise an error.

Parameters

    

  * **hook** ( _Callable_ ) – The user-defined hook to be registered.

  * **prepend** ( _bool_) – If true, the provided `hook` will be fired before all existing `backward` hooks on this `torch.nn.modules.Module`. Otherwise, the provided `hook` will be fired after all existing `backward` hooks on this `torch.nn.modules.Module`. Note that global `backward` hooks registered with `register_module_full_backward_hook()` will fire before all hooks registered by this method.

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

register_full_backward_pre_hook( _hook_ , _prepend =False_)[source]¶

    

Registers a backward pre-hook on the module.

The hook will be called every time the gradients for the module are computed.
The hook should have the following signature:

    
    
    hook(module, grad_output) -> tuple[Tensor] or None
    

The `grad_output` is a tuple. The hook should not modify its arguments, but it
can optionally return a new gradient with respect to the output that will be
used in place of `grad_output` in subsequent computations. Entries in
`grad_output` will be `None` for all non-Tensor arguments.

For technical reasons, when this hook is applied to a Module, its forward
function will receive a view of each Tensor passed to the Module. Similarly
the caller will receive a view of each Tensor returned by the Module’s forward
function.

Warning

Modifying inputs inplace is not allowed when using backward hooks and will
raise an error.

Parameters

    

  * **hook** ( _Callable_ ) – The user-defined hook to be registered.

  * **prepend** ( _bool_) – If true, the provided `hook` will be fired before all existing `backward_pre` hooks on this `torch.nn.modules.Module`. Otherwise, the provided `hook` will be fired after all existing `backward_pre` hooks on this `torch.nn.modules.Module`. Note that global `backward_pre` hooks registered with `register_module_full_backward_pre_hook()` will fire before all hooks registered by this method.

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

register_load_state_dict_post_hook( _hook_ )[source]¶

    

Registers a post hook to be run after module’s `load_state_dict` is called.

It should have the following signature::

    

hook(module, incompatible_keys) -> None

The `module` argument is the current module that this hook is registered on,
and the `incompatible_keys` argument is a `NamedTuple` consisting of
attributes `missing_keys` and `unexpected_keys`. `missing_keys` is a `list` of
`str` containing the missing keys and `unexpected_keys` is a `list` of `str`
containing the unexpected keys.

The given incompatible_keys can be modified inplace if needed.

Note that the checks performed when calling `load_state_dict()` with
`strict=True` are affected by modifications the hook makes to `missing_keys`
or `unexpected_keys`, as expected. Additions to either set of keys will result
in an error being thrown when `strict=True`, and clearing out both missing and
unexpected keys will avoid an error.

Returns

    

a handle that can be used to remove the added hook by calling
`handle.remove()`

Return type

    

`torch.utils.hooks.RemovableHandle`

register_module( _name_ , _module_ )[source]¶

    

Alias for `add_module()`.

register_parameter( _name_ , _param_ )[source]¶

    

Adds a parameter to the module.

The parameter can be accessed as an attribute using given name.

Parameters

    

  * **name** ( _str_) – name of the parameter. The parameter can be accessed from this module using the given name

  * **param** ( _Parameter_ _or_ _None_ ) – parameter to be added to the module. If `None`, then operations that run on parameters, such as `cuda`, are ignored. If `None`, the parameter is **not** included in the module’s `state_dict`.

register_state_dict_pre_hook( _hook_ )[source]¶

    

These hooks will be called with arguments: `self`, `prefix`, and `keep_vars`
before calling `state_dict` on `self`. The registered hooks can be used to
perform pre-processing before the `state_dict` call is made.

requires_grad_( _requires_grad =True_)[source]¶

    

Change if autograd should record operations on parameters in this module.

This method sets the parameters’ `requires_grad` attributes in-place.

This method is helpful for freezing part of the module for finetuning or
training parts of a model individually (e.g., GAN training).

See Locally disabling gradient computation for a comparison between
.requires_grad_() and several similar mechanisms that may be confused with it.

Parameters

    

**requires_grad** ( _bool_) – whether autograd should record operations on
parameters in this module. Default: `True`.

Returns

    

self

Return type

    

Module

set_extra_state( _state_ )[source]¶

    

This function is called from `load_state_dict()` to handle any extra state
found within the state_dict. Implement this function and a corresponding
`get_extra_state()` for your module if you need to store extra state within
its state_dict.

Parameters

    

**state** ( _dict_) – Extra state from the state_dict

share_memory()[source]¶

    

See `torch.Tensor.share_memory_()`

Return type

    

_T_

state_dict( _*_ , _destination : T_destination_, _prefix : str = ''_,
_keep_vars : bool = False_) -> T_destination[source]¶

state_dict( _*_ , _prefix : str = ''_, _keep_vars : bool = False_) ->
Dict[str, Any]

    

Returns a dictionary containing references to the whole state of the module.

Both parameters and persistent buffers (e.g. running averages) are included.
Keys are corresponding parameter and buffer names. Parameters and buffers set
to `None` are not included.

Note

The returned object is a shallow copy. It contains references to the module’s
parameters and buffers.

Warning

Currently `state_dict()` also accepts positional arguments for `destination`,
`prefix` and `keep_vars` in order. However, this is being deprecated and
keyword arguments will be enforced in future releases.

Warning

Please avoid the use of argument `destination` as it is not designed for end-
users.

Parameters

    

  * **destination** ( _dict_ _,_ _optional_ ) – If provided, the state of module will be updated into the dict and the same object is returned. Otherwise, an `OrderedDict` will be created and returned. Default: `None`.

  * **prefix** ( _str_ _,_ _optional_ ) – a prefix added to parameter and buffer names to compose the keys in state_dict. Default: `''`.

  * **keep_vars** ( _bool_ _,_ _optional_ ) – by default the `Tensor` s returned in the state dict are detached from autograd. If it’s set to `True`, detaching will not be performed. Default: `False`.

Returns

    

a dictionary containing a whole state of the module

Return type

    

dict

Example:

    
    
    >>> module.state_dict().keys()
    ['bias', 'weight']
    

to( _device : Optional[Union[int, device]] = ..._, _dtype :
Optional[Union[dtype, str]] = ..._, _non_blocking : bool = ..._) -> T[source]¶

to( _dtype : Union[dtype, str]_, _non_blocking : bool = ..._) -> T

to( _tensor : Tensor_, _non_blocking : bool = ..._) -> T

    

Moves and/or casts the parameters and buffers.

This can be called as

to( _device =None_, _dtype =None_, _non_blocking =False_)[source]

    

to( _dtype_ , _non_blocking =False_)[source]

    

to( _tensor_ , _non_blocking =False_)[source]

    

to( _memory_format =torch.channels_last_)[source]

    

Its signature is similar to `torch.Tensor.to()`, but only accepts floating
point or complex `dtype`s. In addition, this method will only cast the
floating point or complex parameters and buffers to `dtype` (if given). The
integral parameters and buffers will be moved `device`, if that is given, but
with dtypes unchanged. When `non_blocking` is set, it tries to convert/move
asynchronously with respect to the host if possible, e.g., moving CPU Tensors
with pinned memory to CUDA devices.

See below for examples.

Note

This method modifies the module in-place.

Parameters

    

  * **device** (`torch.device`) – the desired device of the parameters and buffers in this module

  * **dtype** (`torch.dtype`) – the desired floating point or complex dtype of the parameters and buffers in this module

  * **tensor** ( _torch.Tensor_) – Tensor whose dtype and device are the desired dtype and device for all parameters and buffers in this module

  * **memory_format** (`torch.memory_format`) – the desired memory format for 4D parameters and buffers in this module (keyword only argument)

Returns

    

self

Return type

    

Module

Examples:

    
    
    >>> linear = nn.Linear(2, 2)
    >>> linear.weight
    Parameter containing:
    tensor([[ 0.1913, -0.3420],
            [-0.5113, -0.2325]])
    >>> linear.to(torch.double)
    Linear(in_features=2, out_features=2, bias=True)
    >>> linear.weight
    Parameter containing:
    tensor([[ 0.1913, -0.3420],
            [-0.5113, -0.2325]], dtype=torch.float64)
    >>> gpu1 = torch.device("cuda:1")
    >>> linear.to(gpu1, dtype=torch.half, non_blocking=True)
    Linear(in_features=2, out_features=2, bias=True)
    >>> linear.weight
    Parameter containing:
    tensor([[ 0.1914, -0.3420],
            [-0.5112, -0.2324]], dtype=torch.float16, device='cuda:1')
    >>> cpu = torch.device("cpu")
    >>> linear.to(cpu)
    Linear(in_features=2, out_features=2, bias=True)
    >>> linear.weight
    Parameter containing:
    tensor([[ 0.1914, -0.3420],
            [-0.5112, -0.2324]], dtype=torch.float16)
    
    >>> linear = nn.Linear(2, 2, bias=None).to(torch.cdouble)
    >>> linear.weight
    Parameter containing:
    tensor([[ 0.3741+0.j,  0.2382+0.j],
            [ 0.5593+0.j, -0.4443+0.j]], dtype=torch.complex128)
    >>> linear(torch.ones(3, 2, dtype=torch.cdouble))
    tensor([[0.6122+0.j, 0.1150+0.j],
            [0.6122+0.j, 0.1150+0.j],
            [0.6122+0.j, 0.1150+0.j]], dtype=torch.complex128)
    

to_empty( _*_ , _device_ , _recurse =True_)[source]¶

    

Moves the parameters and buffers to the specified device without copying
storage.

Parameters

    

  * **device** (`torch.device`) – The desired device of the parameters and buffers in this module.

  * **recurse** ( _bool_) – Whether parameters and buffers of submodules should be recursively moved to the specified device.

Returns

    

self

Return type

    

Module

train( _mode =True_)[source]¶

    

Sets the module in training mode.

This has any effect only on certain modules. See documentations of particular
modules for details of their behaviors in training/evaluation mode, if they
are affected, e.g. `Dropout`, `BatchNorm`, etc.

Parameters

    

**mode** ( _bool_) – whether to set training mode (`True`) or evaluation mode
(`False`). Default: `True`.

Returns

    

self

Return type

    

Module

type( _dst_type_ )[source]¶

    

Casts all parameters and buffers to `dst_type`.

Note

This method modifies the module in-place.

Parameters

    

**dst_type** ( _type_ _or_ _string_ ) – the desired type

Returns

    

self

Return type

    

Module

xpu( _device =None_)[source]¶

    

Moves all model parameters and buffers to the XPU.

This also makes associated parameters and buffers different objects. So it
should be called before constructing optimizer if the module will live on XPU
while being optimized.

Note

This method modifies the module in-place.

Parameters

    

**device** ( _int_ _,_ _optional_ ) – if specified, all parameters will be
copied to that device

Returns

    

self

Return type

    

Module

zero_grad( _set_to_none =True_)[source]¶

    

Resets gradients of all model parameters. See similar function under
`torch.optim.Optimizer` for more context.

Parameters

    

**set_to_none** ( _bool_) – instead of setting to zero, set the grads to None.
See `torch.optim.Optimizer.zero_grad()` for details.

Next ![](../_static/images/chevron-right-orange.svg)
![](../_static/images/chevron-right-orange.svg) Previous

* * *

(C) Copyright 2023, PyTorch Contributors.

Built with Sphinx using a theme provided by Read the Docs.

  * Module
    * `Module`
      * `Module.add_module()`
      * `Module.apply()`
      * `Module.bfloat16()`
      * `Module.buffers()`
      * `Module.children()`
      * `Module.compile()`
      * `Module.cpu()`
      * `Module.cuda()`
      * `Module.double()`
      * `Module.eval()`
      * `Module.extra_repr()`
      * `Module.float()`
      * `Module.forward()`
      * `Module.get_buffer()`
      * `Module.get_extra_state()`
      * `Module.get_parameter()`
      * `Module.get_submodule()`
      * `Module.half()`
      * `Module.ipu()`
      * `Module.load_state_dict()`
      * `Module.modules()`
      * `Module.named_buffers()`
      * `Module.named_children()`
      * `Module.named_modules()`
      * `Module.named_parameters()`
      * `Module.parameters()`
      * `Module.register_backward_hook()`
      * `Module.register_buffer()`
      * `Module.register_forward_hook()`
      * `Module.register_forward_pre_hook()`
      * `Module.register_full_backward_hook()`
      * `Module.register_full_backward_pre_hook()`
      * `Module.register_load_state_dict_post_hook()`
      * `Module.register_module()`
      * `Module.register_parameter()`
      * `Module.register_state_dict_pre_hook()`
      * `Module.requires_grad_()`
      * `Module.set_extra_state()`
      * `Module.share_memory()`
      * `Module.state_dict()`
      * `Module.to()`
      * `Module.to_empty()`
      * `Module.train()`
      * `Module.type()`
      * `Module.xpu()`
      * `Module.zero_grad()`

![](https://www.googleadservices.com/pagead/conversion/795629140/?label=txkmCPmdtosBENSssfsC&guid=ON&script=0)

## Docs

Access comprehensive developer documentation for PyTorch

View Docs

## Tutorials

Get in-depth tutorials for beginners and advanced developers

View Tutorials

## Resources

Find development resources and get your questions answered

View Resources

  * PyTorch
  * Get Started
  * Features
  * Ecosystem
  * Blog
  * Contributing

  * Resources
  * Tutorials
  * Docs
  * Discuss
  * Github Issues
  * Brand Guidelines

  * Stay up to date
  * Facebook
  * Twitter
  * YouTube
  * LinkedIn

  * PyTorch Podcasts
  * Spotify
  * Apple
  * Google
  * Amazon

  * Terms
  * |
  * Privacy

© Copyright The Linux Foundation. The PyTorch Foundation is a project of The
Linux Foundation. For web site terms of use, trademark policy and other
policies applicable to The PyTorch Foundation please see
www.linuxfoundation.org/policies/. The PyTorch Foundation supports the PyTorch
open source project, which has been established as PyTorch Project a Series of
LF Projects, LLC. For policies applicable to the PyTorch Project a Series of
LF Projects, LLC, please see www.lfprojects.org/policies/.

To analyze traffic and optimize your experience, we serve cookies on this
site. By clicking or navigating, you agree to allow our usage of cookies. As
the current maintainers of this site, Facebook’s Cookies Policy applies. Learn
more, including about available controls: Cookies Policy.

![](../_static/images/pytorch-x.svg)

  * Get Started
  * Ecosystem
  * Mobile
  * Blog
  * Tutorials
  * Docs 
    * PyTorch
    * torchaudio
    * torchtext
    * torchvision
    * torcharrow
    * TorchData
    * TorchRec
    * TorchServe
    * TorchX
    * PyTorch on XLA Devices
  * Resources 
    * About
    * PyTorch Foundation
    * Community
    * Community Stories
    * Developer Resources
    * Events
    * Forums
    * Models (Beta)
  * Github

